/*
 * Famifarm-API
 * Famifarm API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.famifarm.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import fi.metatavu.famifarm.client.model.BatchPhase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Identifies a single batch for it&#x27;s entire life-cycle
 */
@Schema(description = "Identifies a single batch for it's entire life-cycle")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-13T22:42:23.922+02:00[Europe/Helsinki]")public class Batch {

  @JsonProperty("id")

  private UUID id = null;

  @JsonProperty("productId")

  private UUID productId = null;

  @JsonProperty("sowingLineNumbers")

  private List<String> sowingLineNumbers = null;

  @JsonProperty("phase")

  private BatchPhase phase = null;

  @JsonProperty("createdAt")

  private OffsetDateTime createdAt = null;
  public Batch id(UUID id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }
  public void setId(UUID id) {
    this.id = id;
  }
  public Batch productId(UUID productId) {
    this.productId = productId;
    return this;
  }

  

  /**
  * Get productId
  * @return productId
  **/
  @Schema(required = true, description = "")
  public UUID getProductId() {
    return productId;
  }
  public void setProductId(UUID productId) {
    this.productId = productId;
  }
  /**
  * Read-only field that shows line numbers used in sowing phase
  * @return sowingLineNumbers
  **/
  @Schema(description = "Read-only field that shows line numbers used in sowing phase")
  public List<String> getSowingLineNumbers() {
    return sowingLineNumbers;
  }
  public Batch phase(BatchPhase phase) {
    this.phase = phase;
    return this;
  }

  

  /**
  * Get phase
  * @return phase
  **/
  @Schema(description = "")
  public BatchPhase getPhase() {
    return phase;
  }
  public void setPhase(BatchPhase phase) {
    this.phase = phase;
  }
  public Batch createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * Get createdAt
  * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Batch batch = (Batch) o;
    return Objects.equals(this.id, batch.id) &&
        Objects.equals(this.productId, batch.productId) &&
        Objects.equals(this.sowingLineNumbers, batch.sowingLineNumbers) &&
        Objects.equals(this.phase, batch.phase) &&
        Objects.equals(this.createdAt, batch.createdAt);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, productId, sowingLineNumbers, phase, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Batch {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    sowingLineNumbers: ").append(toIndentedString(sowingLineNumbers)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

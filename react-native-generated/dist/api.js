"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Joints Tulistop Pro+ API
 * Joints Tulistop Pro+ API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var portableFetch = fetch;
var BASE_PATH = "https://localhost/v1".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace DetailLocation
 */
var DetailLocation;
(function (DetailLocation) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["PLANNED"] = 'PLANNED'] = "PLANNED";
        StatusEnum[StatusEnum["REVIEW"] = 'REVIEW'] = "REVIEW";
        StatusEnum[StatusEnum["DONE"] = 'DONE'] = "DONE";
        StatusEnum[StatusEnum["APPROVED"] = 'APPROVED'] = "APPROVED";
    })(StatusEnum = DetailLocation.StatusEnum || (DetailLocation.StatusEnum = {}));
})(DetailLocation = exports.DetailLocation || (exports.DetailLocation = {}));
/**
 * @export
 * @namespace Site
 */
var Site;
(function (Site) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["OPEN"] = 'OPEN'] = "OPEN";
        StatusEnum[StatusEnum["ARCHIVED"] = 'ARCHIVED'] = "ARCHIVED";
    })(StatusEnum = Site.StatusEnum || (Site.StatusEnum = {}));
})(Site = exports.Site || (exports.Site = {}));
/**
 * @export
 * @namespace SiteSchematic
 */
var SiteSchematic;
(function (SiteSchematic) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["PROCESSING"] = 'PROCESSING'] = "PROCESSING";
        StatusEnum[StatusEnum["ERROR"] = 'ERROR'] = "ERROR";
        StatusEnum[StatusEnum["READY"] = 'READY'] = "READY";
    })(StatusEnum = SiteSchematic.StatusEnum || (SiteSchematic.StatusEnum = {}));
})(SiteSchematic = exports.SiteSchematic || (exports.SiteSchematic = {}));
/**
 * @export
 * @namespace SiteUser
 */
var SiteUser;
(function (SiteUser) {
    /**
     * @export
     * @enum {string}
     */
    var RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["WORKER"] = 'WORKER'] = "WORKER";
        RoleEnum[RoleEnum["PLANNER"] = 'PLANNER'] = "PLANNER";
    })(RoleEnum = SiteUser.RoleEnum || (SiteUser.RoleEnum = {}));
})(SiteUser = exports.SiteUser || (exports.SiteUser = {}));
/**
 *
 * @export
 * @enum {string}
 */
var UserRole;
(function (UserRole) {
    UserRole[UserRole["USER"] = 'USER'] = "USER";
    UserRole[UserRole["PLANNER"] = 'PLANNER'] = "PLANNER";
})(UserRole = exports.UserRole || (exports.UserRole = {}));
/**
 * ProductsApi - fetch parameter creator
 * @export
 */
exports.ProductsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new product
         * @summary Create product
         * @param {Product} body The realm to be created
         * @param {string} realmId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (body, realmId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createProduct.');
            }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createProduct.');
            }
            var localVarPath = "/realms/{realmId}/products"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Product" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a product
         * @summary Delete product
         * @param {string} realmId The id of the realm being deleted
         * @param {string} productId The id of the realm being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: function (realmId, productId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteProduct.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling deleteProduct.');
            }
            var localVarPath = "/realms/{realmId}/products/{productId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a product
         * @summary Finds product
         * @param {string} realmId The id of the realm
         * @param {string} productId The id of the realm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProduct: function (realmId, productId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findProduct.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling findProduct.');
            }
            var localVarPath = "/realms/{realmId}/products/{productId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all products by id
         * @summary Finds products by id
         * @param {string} realmId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: function (realmId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getProducts.');
            }
            var localVarPath = "/realms/{realmId}/products"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a product
         * @summary Update product
         * @param {string} realmId The realm to be updated
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (realmId, productId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateProduct.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling updateProduct.');
            }
            var localVarPath = "/realms/{realmId}/products/{productId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
exports.ProductsApiFp = function (configuration) {
    return {
        /**
         * Creates new product
         * @summary Create product
         * @param {Product} body The realm to be created
         * @param {string} realmId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (body, realmId, options) {
            var localVarFetchArgs = exports.ProductsApiFetchParamCreator(configuration).createProduct(body, realmId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a product
         * @summary Delete product
         * @param {string} realmId The id of the realm being deleted
         * @param {string} productId The id of the realm being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: function (realmId, productId, options) {
            var localVarFetchArgs = exports.ProductsApiFetchParamCreator(configuration).deleteProduct(realmId, productId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a product
         * @summary Finds product
         * @param {string} realmId The id of the realm
         * @param {string} productId The id of the realm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProduct: function (realmId, productId, options) {
            var localVarFetchArgs = exports.ProductsApiFetchParamCreator(configuration).findProduct(realmId, productId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all products by id
         * @summary Finds products by id
         * @param {string} realmId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: function (realmId, options) {
            var localVarFetchArgs = exports.ProductsApiFetchParamCreator(configuration).getProducts(realmId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a product
         * @summary Update product
         * @param {string} realmId The realm to be updated
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (realmId, productId, options) {
            var localVarFetchArgs = exports.ProductsApiFetchParamCreator(configuration).updateProduct(realmId, productId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProductsApi - factory interface
 * @export
 */
exports.ProductsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new product
         * @summary Create product
         * @param {Product} body The realm to be created
         * @param {string} realmId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (body, realmId, options) {
            return exports.ProductsApiFp(configuration).createProduct(body, realmId, options)(fetch, basePath);
        },
        /**
         * Deletes a product
         * @summary Delete product
         * @param {string} realmId The id of the realm being deleted
         * @param {string} productId The id of the realm being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: function (realmId, productId, options) {
            return exports.ProductsApiFp(configuration).deleteProduct(realmId, productId, options)(fetch, basePath);
        },
        /**
         * Finds a product
         * @summary Finds product
         * @param {string} realmId The id of the realm
         * @param {string} productId The id of the realm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProduct: function (realmId, productId, options) {
            return exports.ProductsApiFp(configuration).findProduct(realmId, productId, options)(fetch, basePath);
        },
        /**
         * Finds all products by id
         * @summary Finds products by id
         * @param {string} realmId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: function (realmId, options) {
            return exports.ProductsApiFp(configuration).getProducts(realmId, options)(fetch, basePath);
        },
        /**
         * Updates a product
         * @summary Update product
         * @param {string} realmId The realm to be updated
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (realmId, productId, options) {
            return exports.ProductsApiFp(configuration).updateProduct(realmId, productId, options)(fetch, basePath);
        },
    };
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
var ProductsApi = /** @class */ (function (_super) {
    __extends(ProductsApi, _super);
    function ProductsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new product
     * @summary Create product
     * @param {Product} body The realm to be created
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.createProduct = function (body, realmId, options) {
        return exports.ProductsApiFp(this.configuration).createProduct(body, realmId, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a product
     * @summary Delete product
     * @param {string} realmId The id of the realm being deleted
     * @param {string} productId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.deleteProduct = function (realmId, productId, options) {
        return exports.ProductsApiFp(this.configuration).deleteProduct(realmId, productId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a product
     * @summary Finds product
     * @param {string} realmId The id of the realm
     * @param {string} productId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.findProduct = function (realmId, productId, options) {
        return exports.ProductsApiFp(this.configuration).findProduct(realmId, productId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all products by id
     * @summary Finds products by id
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.getProducts = function (realmId, options) {
        return exports.ProductsApiFp(this.configuration).getProducts(realmId, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a product
     * @summary Update product
     * @param {string} realmId The realm to be updated
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.updateProduct = function (realmId, productId, options) {
        return exports.ProductsApiFp(this.configuration).updateProduct(realmId, productId, options)(this.fetch, this.basePath);
    };
    return ProductsApi;
}(BaseAPI));
exports.ProductsApi = ProductsApi;
/**
 * RealmsApi - fetch parameter creator
 * @export
 */
exports.RealmsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new realm
         * @summary Create realm
         * @param {string} adminEmail Initial realm admin email
         * @param {string} adminPassword Initial realm admin password
         * @param {Realm} body The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRealm: function (adminEmail, adminPassword, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'adminEmail' is not null or undefined
            if (adminEmail === null || adminEmail === undefined) {
                throw new RequiredError('adminEmail', 'Required parameter adminEmail was null or undefined when calling createRealm.');
            }
            // verify required parameter 'adminPassword' is not null or undefined
            if (adminPassword === null || adminPassword === undefined) {
                throw new RequiredError('adminPassword', 'Required parameter adminPassword was null or undefined when calling createRealm.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRealm.');
            }
            var localVarPath = "/realms";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (adminEmail !== undefined) {
                localVarQueryParameter['admin-email'] = adminEmail;
            }
            if (adminPassword !== undefined) {
                localVarQueryParameter['admin-password'] = adminPassword;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Realm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a realm
         * @summary Delete realm
         * @param {string} realmId The id of the realm being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRealm: function (realmId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteRealm.');
            }
            var localVarPath = "/realms/{realmId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a realm
         * @summary Finds realm
         * @param {string} realmId The id of the realm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRealm: function (realmId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findRealm.');
            }
            var localVarPath = "/realms/{realmId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all realms
         * @summary Finds realms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealms: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/realms";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a realm
         * @summary Update realm
         * @param {string} realmId The realm to be updated
         * @param {Realm} payload Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRealm: function (realmId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateRealm.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling updateRealm.');
            }
            var localVarPath = "/realms/{realmId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Realm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RealmsApi - functional programming interface
 * @export
 */
exports.RealmsApiFp = function (configuration) {
    return {
        /**
         * Creates new realm
         * @summary Create realm
         * @param {string} adminEmail Initial realm admin email
         * @param {string} adminPassword Initial realm admin password
         * @param {Realm} body The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRealm: function (adminEmail, adminPassword, body, options) {
            var localVarFetchArgs = exports.RealmsApiFetchParamCreator(configuration).createRealm(adminEmail, adminPassword, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a realm
         * @summary Delete realm
         * @param {string} realmId The id of the realm being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRealm: function (realmId, options) {
            var localVarFetchArgs = exports.RealmsApiFetchParamCreator(configuration).deleteRealm(realmId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a realm
         * @summary Finds realm
         * @param {string} realmId The id of the realm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRealm: function (realmId, options) {
            var localVarFetchArgs = exports.RealmsApiFetchParamCreator(configuration).findRealm(realmId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all realms
         * @summary Finds realms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealms: function (options) {
            var localVarFetchArgs = exports.RealmsApiFetchParamCreator(configuration).getRealms(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a realm
         * @summary Update realm
         * @param {string} realmId The realm to be updated
         * @param {Realm} payload Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRealm: function (realmId, payload, options) {
            var localVarFetchArgs = exports.RealmsApiFetchParamCreator(configuration).updateRealm(realmId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RealmsApi - factory interface
 * @export
 */
exports.RealmsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new realm
         * @summary Create realm
         * @param {string} adminEmail Initial realm admin email
         * @param {string} adminPassword Initial realm admin password
         * @param {Realm} body The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRealm: function (adminEmail, adminPassword, body, options) {
            return exports.RealmsApiFp(configuration).createRealm(adminEmail, adminPassword, body, options)(fetch, basePath);
        },
        /**
         * Deletes a realm
         * @summary Delete realm
         * @param {string} realmId The id of the realm being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRealm: function (realmId, options) {
            return exports.RealmsApiFp(configuration).deleteRealm(realmId, options)(fetch, basePath);
        },
        /**
         * Finds a realm
         * @summary Finds realm
         * @param {string} realmId The id of the realm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRealm: function (realmId, options) {
            return exports.RealmsApiFp(configuration).findRealm(realmId, options)(fetch, basePath);
        },
        /**
         * Finds all realms
         * @summary Finds realms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealms: function (options) {
            return exports.RealmsApiFp(configuration).getRealms(options)(fetch, basePath);
        },
        /**
         * Updates a realm
         * @summary Update realm
         * @param {string} realmId The realm to be updated
         * @param {Realm} payload Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRealm: function (realmId, payload, options) {
            return exports.RealmsApiFp(configuration).updateRealm(realmId, payload, options)(fetch, basePath);
        },
    };
};
/**
 * RealmsApi - object-oriented interface
 * @export
 * @class RealmsApi
 * @extends {BaseAPI}
 */
var RealmsApi = /** @class */ (function (_super) {
    __extends(RealmsApi, _super);
    function RealmsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new realm
     * @summary Create realm
     * @param {string} adminEmail Initial realm admin email
     * @param {string} adminPassword Initial realm admin password
     * @param {Realm} body The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    RealmsApi.prototype.createRealm = function (adminEmail, adminPassword, body, options) {
        return exports.RealmsApiFp(this.configuration).createRealm(adminEmail, adminPassword, body, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a realm
     * @summary Delete realm
     * @param {string} realmId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    RealmsApi.prototype.deleteRealm = function (realmId, options) {
        return exports.RealmsApiFp(this.configuration).deleteRealm(realmId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a realm
     * @summary Finds realm
     * @param {string} realmId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    RealmsApi.prototype.findRealm = function (realmId, options) {
        return exports.RealmsApiFp(this.configuration).findRealm(realmId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all realms
     * @summary Finds realms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    RealmsApi.prototype.getRealms = function (options) {
        return exports.RealmsApiFp(this.configuration).getRealms(options)(this.fetch, this.basePath);
    };
    /**
     * Updates a realm
     * @summary Update realm
     * @param {string} realmId The realm to be updated
     * @param {Realm} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    RealmsApi.prototype.updateRealm = function (realmId, payload, options) {
        return exports.RealmsApiFp(this.configuration).updateRealm(realmId, payload, options)(this.fetch, this.basePath);
    };
    return RealmsApi;
}(BaseAPI));
exports.RealmsApi = RealmsApi;
/**
 * SiteDetailsApi - fetch parameter creator
 * @export
 */
exports.SiteDetailsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new site detail
         * @summary Create site detail
         * @param {string} realmId
         * @param {string} siteId
         * @param {Detail} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetail: function (realmId, siteId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteDetail.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteDetail.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling createSiteDetail.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Detail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates new site detail location
         * @summary Create site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {DetailLocation} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocation: function (realmId, siteId, detailId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteDetailLocation.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteDetailLocation.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling createSiteDetailLocation.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSiteDetailLocation.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DetailLocation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates new site detail location image
         * @summary Create site detail location image
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {Image} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteDetailLocationImage.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteDetailLocationImage.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling createSiteDetailLocationImage.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createSiteDetailLocationImage.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSiteDetailLocationImage.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/images"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Image" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates new site detail location note
         * @summary Create site detail location note
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {DetailLocationNote} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteDetailLocationNote.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteDetailLocationNote.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling createSiteDetailLocationNote.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling createSiteDetailLocationNote.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createSiteDetailLocationNote.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/notes"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DetailLocationNote" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates new site detail shemantic
         * @summary Create site detail shemantic
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {DetailSchematic} detailSchematic Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailSchematic: function (realmId, siteId, detailId, detailSchematic, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteDetailSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteDetailSchematic.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling createSiteDetailSchematic.');
            }
            // verify required parameter 'detailSchematic' is not null or undefined
            if (detailSchematic === null || detailSchematic === undefined) {
                throw new RequiredError('detailSchematic', 'Required parameter detailSchematic was null or undefined when calling createSiteDetailSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/schematics"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DetailSchematic" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(detailSchematic || {}) : (detailSchematic || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a detail schematic
         * @summary Delete detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDetailSchematic: function (realmId, siteId, schematicId, detailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteDetailSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteDetailSchematic.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling deleteDetailSchematic.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling deleteDetailSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/schematics/{schematicId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a detail
         * @summary Delete detail
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetail: function (realmId, siteId, detailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteDetail.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteDetail.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling deleteSiteDetail.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site detail location
         * @summary Delete site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocation: function (realmId, siteId, detailId, locationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteDetailLocation.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteDetailLocation.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling deleteSiteDetailLocation.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteSiteDetailLocation.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site detail location image
         * @summary Delete site detail location image
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} imageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, imageId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteDetailLocationImage.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteDetailLocationImage.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling deleteSiteDetailLocationImage.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteSiteDetailLocationImage.');
            }
            // verify required parameter 'imageId' is not null or undefined
            if (imageId === null || imageId === undefined) {
                throw new RequiredError('imageId', 'Required parameter imageId was null or undefined when calling deleteSiteDetailLocationImage.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/images/{imageId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)))
                .replace("{" + "imageId" + "}", encodeURIComponent(String(imageId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site detail location note
         * @summary Delete site detail location note
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteDetailLocationNote.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteDetailLocationNote.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling deleteSiteDetailLocationNote.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling deleteSiteDetailLocationNote.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId', 'Required parameter noteId was null or undefined when calling deleteSiteDetailLocationNote.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/notes/{noteId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)))
                .replace("{" + "noteId" + "}", encodeURIComponent(String(noteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site report
         * @summary Delete site report
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} reportType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteReport: function (realmId, siteId, reportType, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteReport.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteReport.');
            }
            // verify required parameter 'reportType' is not null or undefined
            if (reportType === null || reportType === undefined) {
                throw new RequiredError('reportType', 'Required parameter reportType was null or undefined when calling deleteSiteReport.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/reports/{reportType}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "reportType" + "}", encodeURIComponent(String(reportType)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site detail
         * @summary Finds site detail
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetail: function (realmId, siteId, detailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteDetail.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteDetail.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling findSiteDetail.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site detail location
         * @summary Finds site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocation: function (realmId, siteId, detailId, locationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteDetailLocation.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteDetailLocation.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling findSiteDetailLocation.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling findSiteDetailLocation.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site detail location image
         * @summary Finds site detail location image
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} imageId
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocationImage: function (realmId, siteId, detailId, imageId, locationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteDetailLocationImage.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteDetailLocationImage.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling findSiteDetailLocationImage.');
            }
            // verify required parameter 'imageId' is not null or undefined
            if (imageId === null || imageId === undefined) {
                throw new RequiredError('imageId', 'Required parameter imageId was null or undefined when calling findSiteDetailLocationImage.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling findSiteDetailLocationImage.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/images/{imageId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "imageId" + "}", encodeURIComponent(String(imageId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site detail location note
         * @summary Finds site detail location note
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {string} noteId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteDetailLocationNote.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteDetailLocationNote.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling findSiteDetailLocationNote.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling findSiteDetailLocationNote.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId', 'Required parameter noteId was null or undefined when calling findSiteDetailLocationNote.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/notes/{noteId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)))
                .replace("{" + "noteId" + "}", encodeURIComponent(String(noteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site detail schematic
         * @summary Finds site detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailSchematic: function (realmId, siteId, schematicId, detailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteDetailSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteDetailSchematic.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling findSiteDetailSchematic.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling findSiteDetailSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/schematics/{schematicId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all site detail location images
         * @summary Finds site detail location images
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocationImages: function (realmId, siteId, detailId, locationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getSiteDetailLocationImages.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling getSiteDetailLocationImages.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling getSiteDetailLocationImages.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling getSiteDetailLocationImages.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/images"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all site detail location notes
         * @summary Finds site detail location notes
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocationNotes: function (realmId, siteId, detailId, locationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getSiteDetailLocationNotes.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling getSiteDetailLocationNotes.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling getSiteDetailLocationNotes.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling getSiteDetailLocationNotes.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/notes"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all site detail locations
         * @summary Finds site detail locations
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocations: function (realmId, siteId, detailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getSiteDetailLocations.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling getSiteDetailLocations.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling getSiteDetailLocations.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all sites detail schematics
         * @summary Finds sites detail schematics
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {string} detailId The id of detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailSchematics: function (realmId, siteId, detailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getSiteDetailSchematics.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling getSiteDetailSchematics.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling getSiteDetailSchematics.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/schematics"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds all sites details
         * @summary Finds sites details
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetails: function (realmId, siteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getSiteDetails.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling getSiteDetails.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a detail schematic
         * @summary Update detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {DetailSchematic} detailSchematic Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetailSchematic: function (realmId, siteId, schematicId, detailId, detailSchematic, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateDetailSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateDetailSchematic.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling updateDetailSchematic.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling updateDetailSchematic.');
            }
            // verify required parameter 'detailSchematic' is not null or undefined
            if (detailSchematic === null || detailSchematic === undefined) {
                throw new RequiredError('detailSchematic', 'Required parameter detailSchematic was null or undefined when calling updateDetailSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/schematics/{schematicId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DetailSchematic" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(detailSchematic || {}) : (detailSchematic || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a detail
         * @summary Update detail
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} detailId The id of the detail
         * @param {Detail} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetail: function (realmId, siteId, detailId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSiteDetail.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSiteDetail.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling updateSiteDetail.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling updateSiteDetail.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Detail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a site detail location
         * @summary Update site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {DetailLocation} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocation: function (realmId, siteId, detailId, locationId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSiteDetailLocation.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSiteDetailLocation.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling updateSiteDetailLocation.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateSiteDetailLocation.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSiteDetailLocation.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DetailLocation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a site detail location image
         * @summary Update site detail location image
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} imageId
         * @param {Image} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, imageId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSiteDetailLocationImage.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSiteDetailLocationImage.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling updateSiteDetailLocationImage.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateSiteDetailLocationImage.');
            }
            // verify required parameter 'imageId' is not null or undefined
            if (imageId === null || imageId === undefined) {
                throw new RequiredError('imageId', 'Required parameter imageId was null or undefined when calling updateSiteDetailLocationImage.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSiteDetailLocationImage.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/images/{imageId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)))
                .replace("{" + "imageId" + "}", encodeURIComponent(String(imageId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Image" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a site detail location note
         * @summary Update site detail location note
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} noteId
         * @param {DetailLocationNote} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSiteDetailLocationNote.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSiteDetailLocationNote.');
            }
            // verify required parameter 'detailId' is not null or undefined
            if (detailId === null || detailId === undefined) {
                throw new RequiredError('detailId', 'Required parameter detailId was null or undefined when calling updateSiteDetailLocationNote.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId', 'Required parameter locationId was null or undefined when calling updateSiteDetailLocationNote.');
            }
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId', 'Required parameter noteId was null or undefined when calling updateSiteDetailLocationNote.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSiteDetailLocationNote.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/details/{detailId}/locations/{locationId}/notes/{noteId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "detailId" + "}", encodeURIComponent(String(detailId)))
                .replace("{" + "locationId" + "}", encodeURIComponent(String(locationId)))
                .replace("{" + "noteId" + "}", encodeURIComponent(String(noteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DetailLocationNote" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SiteDetailsApi - functional programming interface
 * @export
 */
exports.SiteDetailsApiFp = function (configuration) {
    return {
        /**
         * Creates new site detail
         * @summary Create site detail
         * @param {string} realmId
         * @param {string} siteId
         * @param {Detail} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetail: function (realmId, siteId, payload, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).createSiteDetail(realmId, siteId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates new site detail location
         * @summary Create site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {DetailLocation} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocation: function (realmId, siteId, detailId, body, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).createSiteDetailLocation(realmId, siteId, detailId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates new site detail location image
         * @summary Create site detail location image
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {Image} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, body, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).createSiteDetailLocationImage(realmId, siteId, detailId, locationId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates new site detail location note
         * @summary Create site detail location note
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {DetailLocationNote} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, body, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).createSiteDetailLocationNote(realmId, siteId, detailId, locationId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates new site detail shemantic
         * @summary Create site detail shemantic
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {DetailSchematic} detailSchematic Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailSchematic: function (realmId, siteId, detailId, detailSchematic, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).createSiteDetailSchematic(realmId, siteId, detailId, detailSchematic, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a detail schematic
         * @summary Delete detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDetailSchematic: function (realmId, siteId, schematicId, detailId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).deleteDetailSchematic(realmId, siteId, schematicId, detailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a detail
         * @summary Delete detail
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetail: function (realmId, siteId, detailId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).deleteSiteDetail(realmId, siteId, detailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site detail location
         * @summary Delete site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocation: function (realmId, siteId, detailId, locationId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).deleteSiteDetailLocation(realmId, siteId, detailId, locationId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site detail location image
         * @summary Delete site detail location image
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} imageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, imageId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).deleteSiteDetailLocationImage(realmId, siteId, detailId, locationId, imageId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site detail location note
         * @summary Delete site detail location note
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).deleteSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site report
         * @summary Delete site report
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} reportType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteReport: function (realmId, siteId, reportType, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).deleteSiteReport(realmId, siteId, reportType, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site detail
         * @summary Finds site detail
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetail: function (realmId, siteId, detailId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).findSiteDetail(realmId, siteId, detailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site detail location
         * @summary Finds site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocation: function (realmId, siteId, detailId, locationId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).findSiteDetailLocation(realmId, siteId, detailId, locationId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site detail location image
         * @summary Finds site detail location image
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} imageId
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocationImage: function (realmId, siteId, detailId, imageId, locationId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).findSiteDetailLocationImage(realmId, siteId, detailId, imageId, locationId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site detail location note
         * @summary Finds site detail location note
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {string} noteId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).findSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site detail schematic
         * @summary Finds site detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailSchematic: function (realmId, siteId, schematicId, detailId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).findSiteDetailSchematic(realmId, siteId, schematicId, detailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all site detail location images
         * @summary Finds site detail location images
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocationImages: function (realmId, siteId, detailId, locationId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).getSiteDetailLocationImages(realmId, siteId, detailId, locationId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all site detail location notes
         * @summary Finds site detail location notes
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocationNotes: function (realmId, siteId, detailId, locationId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).getSiteDetailLocationNotes(realmId, siteId, detailId, locationId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all site detail locations
         * @summary Finds site detail locations
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocations: function (realmId, siteId, detailId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).getSiteDetailLocations(realmId, siteId, detailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all sites detail schematics
         * @summary Finds sites detail schematics
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {string} detailId The id of detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailSchematics: function (realmId, siteId, detailId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).getSiteDetailSchematics(realmId, siteId, detailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds all sites details
         * @summary Finds sites details
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetails: function (realmId, siteId, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).getSiteDetails(realmId, siteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a detail schematic
         * @summary Update detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {DetailSchematic} detailSchematic Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetailSchematic: function (realmId, siteId, schematicId, detailId, detailSchematic, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).updateDetailSchematic(realmId, siteId, schematicId, detailId, detailSchematic, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a detail
         * @summary Update detail
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} detailId The id of the detail
         * @param {Detail} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetail: function (realmId, siteId, detailId, payload, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).updateSiteDetail(realmId, siteId, detailId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a site detail location
         * @summary Update site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {DetailLocation} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocation: function (realmId, siteId, detailId, locationId, body, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).updateSiteDetailLocation(realmId, siteId, detailId, locationId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a site detail location image
         * @summary Update site detail location image
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} imageId
         * @param {Image} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, imageId, body, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).updateSiteDetailLocationImage(realmId, siteId, detailId, locationId, imageId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a site detail location note
         * @summary Update site detail location note
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} noteId
         * @param {DetailLocationNote} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, body, options) {
            var localVarFetchArgs = exports.SiteDetailsApiFetchParamCreator(configuration).updateSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SiteDetailsApi - factory interface
 * @export
 */
exports.SiteDetailsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new site detail
         * @summary Create site detail
         * @param {string} realmId
         * @param {string} siteId
         * @param {Detail} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetail: function (realmId, siteId, payload, options) {
            return exports.SiteDetailsApiFp(configuration).createSiteDetail(realmId, siteId, payload, options)(fetch, basePath);
        },
        /**
         * Creates new site detail location
         * @summary Create site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {DetailLocation} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocation: function (realmId, siteId, detailId, body, options) {
            return exports.SiteDetailsApiFp(configuration).createSiteDetailLocation(realmId, siteId, detailId, body, options)(fetch, basePath);
        },
        /**
         * Creates new site detail location image
         * @summary Create site detail location image
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {Image} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, body, options) {
            return exports.SiteDetailsApiFp(configuration).createSiteDetailLocationImage(realmId, siteId, detailId, locationId, body, options)(fetch, basePath);
        },
        /**
         * Creates new site detail location note
         * @summary Create site detail location note
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {DetailLocationNote} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, body, options) {
            return exports.SiteDetailsApiFp(configuration).createSiteDetailLocationNote(realmId, siteId, detailId, locationId, body, options)(fetch, basePath);
        },
        /**
         * Creates new site detail shemantic
         * @summary Create site detail shemantic
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {DetailSchematic} detailSchematic Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteDetailSchematic: function (realmId, siteId, detailId, detailSchematic, options) {
            return exports.SiteDetailsApiFp(configuration).createSiteDetailSchematic(realmId, siteId, detailId, detailSchematic, options)(fetch, basePath);
        },
        /**
         * Deletes a detail schematic
         * @summary Delete detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDetailSchematic: function (realmId, siteId, schematicId, detailId, options) {
            return exports.SiteDetailsApiFp(configuration).deleteDetailSchematic(realmId, siteId, schematicId, detailId, options)(fetch, basePath);
        },
        /**
         * Deletes a detail
         * @summary Delete detail
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetail: function (realmId, siteId, detailId, options) {
            return exports.SiteDetailsApiFp(configuration).deleteSiteDetail(realmId, siteId, detailId, options)(fetch, basePath);
        },
        /**
         * Deletes a site detail location
         * @summary Delete site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocation: function (realmId, siteId, detailId, locationId, options) {
            return exports.SiteDetailsApiFp(configuration).deleteSiteDetailLocation(realmId, siteId, detailId, locationId, options)(fetch, basePath);
        },
        /**
         * Deletes a site detail location image
         * @summary Delete site detail location image
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} imageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, imageId, options) {
            return exports.SiteDetailsApiFp(configuration).deleteSiteDetailLocationImage(realmId, siteId, detailId, locationId, imageId, options)(fetch, basePath);
        },
        /**
         * Deletes a site detail location note
         * @summary Delete site detail location note
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, options) {
            return exports.SiteDetailsApiFp(configuration).deleteSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, options)(fetch, basePath);
        },
        /**
         * Deletes a site report
         * @summary Delete site report
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} reportType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteReport: function (realmId, siteId, reportType, options) {
            return exports.SiteDetailsApiFp(configuration).deleteSiteReport(realmId, siteId, reportType, options)(fetch, basePath);
        },
        /**
         * Finds a site detail
         * @summary Finds site detail
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetail: function (realmId, siteId, detailId, options) {
            return exports.SiteDetailsApiFp(configuration).findSiteDetail(realmId, siteId, detailId, options)(fetch, basePath);
        },
        /**
         * Finds a site detail location
         * @summary Finds site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocation: function (realmId, siteId, detailId, locationId, options) {
            return exports.SiteDetailsApiFp(configuration).findSiteDetailLocation(realmId, siteId, detailId, locationId, options)(fetch, basePath);
        },
        /**
         * Finds a site detail location image
         * @summary Finds site detail location image
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} imageId
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocationImage: function (realmId, siteId, detailId, imageId, locationId, options) {
            return exports.SiteDetailsApiFp(configuration).findSiteDetailLocationImage(realmId, siteId, detailId, imageId, locationId, options)(fetch, basePath);
        },
        /**
         * Finds a site detail location note
         * @summary Finds site detail location note
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {string} noteId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, options) {
            return exports.SiteDetailsApiFp(configuration).findSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, options)(fetch, basePath);
        },
        /**
         * Finds a site detail schematic
         * @summary Finds site detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteDetailSchematic: function (realmId, siteId, schematicId, detailId, options) {
            return exports.SiteDetailsApiFp(configuration).findSiteDetailSchematic(realmId, siteId, schematicId, detailId, options)(fetch, basePath);
        },
        /**
         * Finds all site detail location images
         * @summary Finds site detail location images
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocationImages: function (realmId, siteId, detailId, locationId, options) {
            return exports.SiteDetailsApiFp(configuration).getSiteDetailLocationImages(realmId, siteId, detailId, locationId, options)(fetch, basePath);
        },
        /**
         * Finds all site detail location notes
         * @summary Finds site detail location notes
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocationNotes: function (realmId, siteId, detailId, locationId, options) {
            return exports.SiteDetailsApiFp(configuration).getSiteDetailLocationNotes(realmId, siteId, detailId, locationId, options)(fetch, basePath);
        },
        /**
         * Finds all site detail locations
         * @summary Finds site detail locations
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailLocations: function (realmId, siteId, detailId, options) {
            return exports.SiteDetailsApiFp(configuration).getSiteDetailLocations(realmId, siteId, detailId, options)(fetch, basePath);
        },
        /**
         * Finds all sites detail schematics
         * @summary Finds sites detail schematics
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {string} detailId The id of detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetailSchematics: function (realmId, siteId, detailId, options) {
            return exports.SiteDetailsApiFp(configuration).getSiteDetailSchematics(realmId, siteId, detailId, options)(fetch, basePath);
        },
        /**
         * Finds all sites details
         * @summary Finds sites details
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteDetails: function (realmId, siteId, options) {
            return exports.SiteDetailsApiFp(configuration).getSiteDetails(realmId, siteId, options)(fetch, basePath);
        },
        /**
         * Updates a detail schematic
         * @summary Update detail schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {string} detailId The id of the detail
         * @param {DetailSchematic} detailSchematic Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetailSchematic: function (realmId, siteId, schematicId, detailId, detailSchematic, options) {
            return exports.SiteDetailsApiFp(configuration).updateDetailSchematic(realmId, siteId, schematicId, detailId, detailSchematic, options)(fetch, basePath);
        },
        /**
         * Updates a detail
         * @summary Update detail
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} detailId The id of the detail
         * @param {Detail} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetail: function (realmId, siteId, detailId, payload, options) {
            return exports.SiteDetailsApiFp(configuration).updateSiteDetail(realmId, siteId, detailId, payload, options)(fetch, basePath);
        },
        /**
         * Updates a site detail location
         * @summary Update site detail location
         * @param {string} realmId The realm to be created
         * @param {string} siteId The realm to be created
         * @param {string} detailId The realm to be created
         * @param {string} locationId The realm to be created
         * @param {DetailLocation} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocation: function (realmId, siteId, detailId, locationId, body, options) {
            return exports.SiteDetailsApiFp(configuration).updateSiteDetailLocation(realmId, siteId, detailId, locationId, body, options)(fetch, basePath);
        },
        /**
         * Updates a site detail location image
         * @summary Update site detail location image
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} imageId
         * @param {Image} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocationImage: function (realmId, siteId, detailId, locationId, imageId, body, options) {
            return exports.SiteDetailsApiFp(configuration).updateSiteDetailLocationImage(realmId, siteId, detailId, locationId, imageId, body, options)(fetch, basePath);
        },
        /**
         * Updates a site detail location note
         * @summary Update site detail location note
         * @param {string} realmId
         * @param {string} siteId
         * @param {string} detailId
         * @param {string} locationId
         * @param {string} noteId
         * @param {DetailLocationNote} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteDetailLocationNote: function (realmId, siteId, detailId, locationId, noteId, body, options) {
            return exports.SiteDetailsApiFp(configuration).updateSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, body, options)(fetch, basePath);
        },
    };
};
/**
 * SiteDetailsApi - object-oriented interface
 * @export
 * @class SiteDetailsApi
 * @extends {BaseAPI}
 */
var SiteDetailsApi = /** @class */ (function (_super) {
    __extends(SiteDetailsApi, _super);
    function SiteDetailsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new site detail
     * @summary Create site detail
     * @param {string} realmId
     * @param {string} siteId
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.createSiteDetail = function (realmId, siteId, payload, options) {
        return exports.SiteDetailsApiFp(this.configuration).createSiteDetail(realmId, siteId, payload, options)(this.fetch, this.basePath);
    };
    /**
     * Creates new site detail location
     * @summary Create site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.createSiteDetailLocation = function (realmId, siteId, detailId, body, options) {
        return exports.SiteDetailsApiFp(this.configuration).createSiteDetailLocation(realmId, siteId, detailId, body, options)(this.fetch, this.basePath);
    };
    /**
     * Creates new site detail location image
     * @summary Create site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.createSiteDetailLocationImage = function (realmId, siteId, detailId, locationId, body, options) {
        return exports.SiteDetailsApiFp(this.configuration).createSiteDetailLocationImage(realmId, siteId, detailId, locationId, body, options)(this.fetch, this.basePath);
    };
    /**
     * Creates new site detail location note
     * @summary Create site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.createSiteDetailLocationNote = function (realmId, siteId, detailId, locationId, body, options) {
        return exports.SiteDetailsApiFp(this.configuration).createSiteDetailLocationNote(realmId, siteId, detailId, locationId, body, options)(this.fetch, this.basePath);
    };
    /**
     * Creates new site detail shemantic
     * @summary Create site detail shemantic
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.createSiteDetailSchematic = function (realmId, siteId, detailId, detailSchematic, options) {
        return exports.SiteDetailsApiFp(this.configuration).createSiteDetailSchematic(realmId, siteId, detailId, detailSchematic, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a detail schematic
     * @summary Delete detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.deleteDetailSchematic = function (realmId, siteId, schematicId, detailId, options) {
        return exports.SiteDetailsApiFp(this.configuration).deleteDetailSchematic(realmId, siteId, schematicId, detailId, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a detail
     * @summary Delete detail
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.deleteSiteDetail = function (realmId, siteId, detailId, options) {
        return exports.SiteDetailsApiFp(this.configuration).deleteSiteDetail(realmId, siteId, detailId, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site detail location
     * @summary Delete site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.deleteSiteDetailLocation = function (realmId, siteId, detailId, locationId, options) {
        return exports.SiteDetailsApiFp(this.configuration).deleteSiteDetailLocation(realmId, siteId, detailId, locationId, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site detail location image
     * @summary Delete site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.deleteSiteDetailLocationImage = function (realmId, siteId, detailId, locationId, imageId, options) {
        return exports.SiteDetailsApiFp(this.configuration).deleteSiteDetailLocationImage(realmId, siteId, detailId, locationId, imageId, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site detail location note
     * @summary Delete site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.deleteSiteDetailLocationNote = function (realmId, siteId, detailId, locationId, noteId, options) {
        return exports.SiteDetailsApiFp(this.configuration).deleteSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site report
     * @summary Delete site report
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} reportType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.deleteSiteReport = function (realmId, siteId, reportType, options) {
        return exports.SiteDetailsApiFp(this.configuration).deleteSiteReport(realmId, siteId, reportType, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site detail
     * @summary Finds site detail
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.findSiteDetail = function (realmId, siteId, detailId, options) {
        return exports.SiteDetailsApiFp(this.configuration).findSiteDetail(realmId, siteId, detailId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site detail location
     * @summary Finds site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.findSiteDetailLocation = function (realmId, siteId, detailId, locationId, options) {
        return exports.SiteDetailsApiFp(this.configuration).findSiteDetailLocation(realmId, siteId, detailId, locationId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site detail location image
     * @summary Finds site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} imageId
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.findSiteDetailLocationImage = function (realmId, siteId, detailId, imageId, locationId, options) {
        return exports.SiteDetailsApiFp(this.configuration).findSiteDetailLocationImage(realmId, siteId, detailId, imageId, locationId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site detail location note
     * @summary Finds site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {string} noteId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.findSiteDetailLocationNote = function (realmId, siteId, detailId, locationId, noteId, options) {
        return exports.SiteDetailsApiFp(this.configuration).findSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site detail schematic
     * @summary Finds site detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.findSiteDetailSchematic = function (realmId, siteId, schematicId, detailId, options) {
        return exports.SiteDetailsApiFp(this.configuration).findSiteDetailSchematic(realmId, siteId, schematicId, detailId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all site detail location images
     * @summary Finds site detail location images
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.getSiteDetailLocationImages = function (realmId, siteId, detailId, locationId, options) {
        return exports.SiteDetailsApiFp(this.configuration).getSiteDetailLocationImages(realmId, siteId, detailId, locationId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all site detail location notes
     * @summary Finds site detail location notes
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.getSiteDetailLocationNotes = function (realmId, siteId, detailId, locationId, options) {
        return exports.SiteDetailsApiFp(this.configuration).getSiteDetailLocationNotes(realmId, siteId, detailId, locationId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all site detail locations
     * @summary Finds site detail locations
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.getSiteDetailLocations = function (realmId, siteId, detailId, options) {
        return exports.SiteDetailsApiFp(this.configuration).getSiteDetailLocations(realmId, siteId, detailId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all sites detail schematics
     * @summary Finds sites detail schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {string} detailId The id of detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.getSiteDetailSchematics = function (realmId, siteId, detailId, options) {
        return exports.SiteDetailsApiFp(this.configuration).getSiteDetailSchematics(realmId, siteId, detailId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds all sites details
     * @summary Finds sites details
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.getSiteDetails = function (realmId, siteId, options) {
        return exports.SiteDetailsApiFp(this.configuration).getSiteDetails(realmId, siteId, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a detail schematic
     * @summary Update detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.updateDetailSchematic = function (realmId, siteId, schematicId, detailId, detailSchematic, options) {
        return exports.SiteDetailsApiFp(this.configuration).updateDetailSchematic(realmId, siteId, schematicId, detailId, detailSchematic, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a detail
     * @summary Update detail
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} detailId The id of the detail
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.updateSiteDetail = function (realmId, siteId, detailId, payload, options) {
        return exports.SiteDetailsApiFp(this.configuration).updateSiteDetail(realmId, siteId, detailId, payload, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a site detail location
     * @summary Update site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.updateSiteDetailLocation = function (realmId, siteId, detailId, locationId, body, options) {
        return exports.SiteDetailsApiFp(this.configuration).updateSiteDetailLocation(realmId, siteId, detailId, locationId, body, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a site detail location image
     * @summary Update site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.updateSiteDetailLocationImage = function (realmId, siteId, detailId, locationId, imageId, body, options) {
        return exports.SiteDetailsApiFp(this.configuration).updateSiteDetailLocationImage(realmId, siteId, detailId, locationId, imageId, body, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a site detail location note
     * @summary Update site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    SiteDetailsApi.prototype.updateSiteDetailLocationNote = function (realmId, siteId, detailId, locationId, noteId, body, options) {
        return exports.SiteDetailsApiFp(this.configuration).updateSiteDetailLocationNote(realmId, siteId, detailId, locationId, noteId, body, options)(this.fetch, this.basePath);
    };
    return SiteDetailsApi;
}(BaseAPI));
exports.SiteDetailsApi = SiteDetailsApi;
/**
 * SiteSchematicTilesApi - fetch parameter creator
 * @export
 */
exports.SiteSchematicTilesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns site schematic tile image as png
         * @summary Returns site schematic tile image
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {number} z Tile zoom level
         * @param {number} x Tile x
         * @param {number} y Tile y
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteSchematicTileImage: function (realmId, siteId, schematicId, z, x, y, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling getSiteSchematicTileImage.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling getSiteSchematicTileImage.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling getSiteSchematicTileImage.');
            }
            // verify required parameter 'z' is not null or undefined
            if (z === null || z === undefined) {
                throw new RequiredError('z', 'Required parameter z was null or undefined when calling getSiteSchematicTileImage.');
            }
            // verify required parameter 'x' is not null or undefined
            if (x === null || x === undefined) {
                throw new RequiredError('x', 'Required parameter x was null or undefined when calling getSiteSchematicTileImage.');
            }
            // verify required parameter 'y' is not null or undefined
            if (y === null || y === undefined) {
                throw new RequiredError('y', 'Required parameter y was null or undefined when calling getSiteSchematicTileImage.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/schematics/{schematicId}/tiles/{z}/{x}/{y}.png"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)))
                .replace("{" + "z" + "}", encodeURIComponent(String(z)))
                .replace("{" + "x" + "}", encodeURIComponent(String(x)))
                .replace("{" + "y" + "}", encodeURIComponent(String(y)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SiteSchematicTilesApi - functional programming interface
 * @export
 */
exports.SiteSchematicTilesApiFp = function (configuration) {
    return {
        /**
         * Returns site schematic tile image as png
         * @summary Returns site schematic tile image
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {number} z Tile zoom level
         * @param {number} x Tile x
         * @param {number} y Tile y
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteSchematicTileImage: function (realmId, siteId, schematicId, z, x, y, options) {
            var localVarFetchArgs = exports.SiteSchematicTilesApiFetchParamCreator(configuration).getSiteSchematicTileImage(realmId, siteId, schematicId, z, x, y, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SiteSchematicTilesApi - factory interface
 * @export
 */
exports.SiteSchematicTilesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns site schematic tile image as png
         * @summary Returns site schematic tile image
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {number} z Tile zoom level
         * @param {number} x Tile x
         * @param {number} y Tile y
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteSchematicTileImage: function (realmId, siteId, schematicId, z, x, y, options) {
            return exports.SiteSchematicTilesApiFp(configuration).getSiteSchematicTileImage(realmId, siteId, schematicId, z, x, y, options)(fetch, basePath);
        },
    };
};
/**
 * SiteSchematicTilesApi - object-oriented interface
 * @export
 * @class SiteSchematicTilesApi
 * @extends {BaseAPI}
 */
var SiteSchematicTilesApi = /** @class */ (function (_super) {
    __extends(SiteSchematicTilesApi, _super);
    function SiteSchematicTilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns site schematic tile image as png
     * @summary Returns site schematic tile image
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {number} z Tile zoom level
     * @param {number} x Tile x
     * @param {number} y Tile y
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicTilesApi
     */
    SiteSchematicTilesApi.prototype.getSiteSchematicTileImage = function (realmId, siteId, schematicId, z, x, y, options) {
        return exports.SiteSchematicTilesApiFp(this.configuration).getSiteSchematicTileImage(realmId, siteId, schematicId, z, x, y, options)(this.fetch, this.basePath);
    };
    return SiteSchematicTilesApi;
}(BaseAPI));
exports.SiteSchematicTilesApi = SiteSchematicTilesApi;
/**
 * SiteSchematicsApi - fetch parameter creator
 * @export
 */
exports.SiteSchematicsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new site schematic
         * @summary Create site schematic
         * @param {string} realmId
         * @param {string} siteId
         * @param {SiteSchematic} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteSchematic: function (realmId, siteId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteSchematic.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling createSiteSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/schematics"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SiteSchematic" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site schematic
         * @summary Delete site schematic
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {string} schematicId The id of the schematic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteSchematic: function (realmId, siteId, schematicId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteSchematic.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling deleteSiteSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/schematics/{schematicId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site schematic
         * @summary Finds site schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteSchematic: function (realmId, siteId, schematicId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteSchematic.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling findSiteSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/schematics/{schematicId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists site schematics
         * @summary Lists site schematics
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiteSchematics: function (realmId, siteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling listSiteSchematics.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling listSiteSchematics.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/schematics"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Schematic
         * @summary Update Schematic
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} schematicId The id of the schematic
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchematic: function (realmId, siteId, schematicId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSchematic.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSchematic.');
            }
            // verify required parameter 'schematicId' is not null or undefined
            if (schematicId === null || schematicId === undefined) {
                throw new RequiredError('schematicId', 'Required parameter schematicId was null or undefined when calling updateSchematic.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling updateSchematic.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/schematics/{schematicId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "schematicId" + "}", encodeURIComponent(String(schematicId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Site" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SiteSchematicsApi - functional programming interface
 * @export
 */
exports.SiteSchematicsApiFp = function (configuration) {
    return {
        /**
         * Creates new site schematic
         * @summary Create site schematic
         * @param {string} realmId
         * @param {string} siteId
         * @param {SiteSchematic} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteSchematic: function (realmId, siteId, payload, options) {
            var localVarFetchArgs = exports.SiteSchematicsApiFetchParamCreator(configuration).createSiteSchematic(realmId, siteId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site schematic
         * @summary Delete site schematic
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {string} schematicId The id of the schematic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteSchematic: function (realmId, siteId, schematicId, options) {
            var localVarFetchArgs = exports.SiteSchematicsApiFetchParamCreator(configuration).deleteSiteSchematic(realmId, siteId, schematicId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site schematic
         * @summary Finds site schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteSchematic: function (realmId, siteId, schematicId, options) {
            var localVarFetchArgs = exports.SiteSchematicsApiFetchParamCreator(configuration).findSiteSchematic(realmId, siteId, schematicId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists site schematics
         * @summary Lists site schematics
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiteSchematics: function (realmId, siteId, options) {
            var localVarFetchArgs = exports.SiteSchematicsApiFetchParamCreator(configuration).listSiteSchematics(realmId, siteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Schematic
         * @summary Update Schematic
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} schematicId The id of the schematic
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchematic: function (realmId, siteId, schematicId, payload, options) {
            var localVarFetchArgs = exports.SiteSchematicsApiFetchParamCreator(configuration).updateSchematic(realmId, siteId, schematicId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SiteSchematicsApi - factory interface
 * @export
 */
exports.SiteSchematicsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new site schematic
         * @summary Create site schematic
         * @param {string} realmId
         * @param {string} siteId
         * @param {SiteSchematic} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteSchematic: function (realmId, siteId, payload, options) {
            return exports.SiteSchematicsApiFp(configuration).createSiteSchematic(realmId, siteId, payload, options)(fetch, basePath);
        },
        /**
         * Deletes a site schematic
         * @summary Delete site schematic
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {string} schematicId The id of the schematic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteSchematic: function (realmId, siteId, schematicId, options) {
            return exports.SiteSchematicsApiFp(configuration).deleteSiteSchematic(realmId, siteId, schematicId, options)(fetch, basePath);
        },
        /**
         * Finds a site schematic
         * @summary Finds site schematic
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} schematicId The id of the schematic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteSchematic: function (realmId, siteId, schematicId, options) {
            return exports.SiteSchematicsApiFp(configuration).findSiteSchematic(realmId, siteId, schematicId, options)(fetch, basePath);
        },
        /**
         * Lists site schematics
         * @summary Lists site schematics
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiteSchematics: function (realmId, siteId, options) {
            return exports.SiteSchematicsApiFp(configuration).listSiteSchematics(realmId, siteId, options)(fetch, basePath);
        },
        /**
         * Updates a Schematic
         * @summary Update Schematic
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} schematicId The id of the schematic
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchematic: function (realmId, siteId, schematicId, payload, options) {
            return exports.SiteSchematicsApiFp(configuration).updateSchematic(realmId, siteId, schematicId, payload, options)(fetch, basePath);
        },
    };
};
/**
 * SiteSchematicsApi - object-oriented interface
 * @export
 * @class SiteSchematicsApi
 * @extends {BaseAPI}
 */
var SiteSchematicsApi = /** @class */ (function (_super) {
    __extends(SiteSchematicsApi, _super);
    function SiteSchematicsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new site schematic
     * @summary Create site schematic
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteSchematic} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    SiteSchematicsApi.prototype.createSiteSchematic = function (realmId, siteId, payload, options) {
        return exports.SiteSchematicsApiFp(this.configuration).createSiteSchematic(realmId, siteId, payload, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site schematic
     * @summary Delete site schematic
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    SiteSchematicsApi.prototype.deleteSiteSchematic = function (realmId, siteId, schematicId, options) {
        return exports.SiteSchematicsApiFp(this.configuration).deleteSiteSchematic(realmId, siteId, schematicId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site schematic
     * @summary Finds site schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    SiteSchematicsApi.prototype.findSiteSchematic = function (realmId, siteId, schematicId, options) {
        return exports.SiteSchematicsApiFp(this.configuration).findSiteSchematic(realmId, siteId, schematicId, options)(this.fetch, this.basePath);
    };
    /**
     * Lists site schematics
     * @summary Lists site schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    SiteSchematicsApi.prototype.listSiteSchematics = function (realmId, siteId, options) {
        return exports.SiteSchematicsApiFp(this.configuration).listSiteSchematics(realmId, siteId, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Schematic
     * @summary Update Schematic
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} schematicId The id of the schematic
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    SiteSchematicsApi.prototype.updateSchematic = function (realmId, siteId, schematicId, payload, options) {
        return exports.SiteSchematicsApiFp(this.configuration).updateSchematic(realmId, siteId, schematicId, payload, options)(this.fetch, this.basePath);
    };
    return SiteSchematicsApi;
}(BaseAPI));
exports.SiteSchematicsApi = SiteSchematicsApi;
/**
 * SiteUsersApi - fetch parameter creator
 * @export
 */
exports.SiteUsersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new site user
         * @summary Create site user
         * @param {string} realmId
         * @param {string} siteId
         * @param {SiteUser} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteUser: function (realmId, siteId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSiteUser.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling createSiteUser.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling createSiteUser.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/users"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SiteUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site user
         * @summary Delete site user
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteUser: function (realmId, siteId, userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSiteUser.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSiteUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteSiteUser.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/users/{userId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site user
         * @summary Finds site user
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteUser: function (realmId, siteId, userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSiteUser.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSiteUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling findSiteUser.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/users/{userId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all site users
         * @summary Lists site users
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiteUsers: function (realmId, siteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling listSiteUsers.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling listSiteUsers.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/users"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a site user
         * @summary Update site user
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} userId The id of the user
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteUser: function (realmId, siteId, userId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSiteUser.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSiteUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling updateSiteUser.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling updateSiteUser.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}/users/{userId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)))
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Site" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SiteUsersApi - functional programming interface
 * @export
 */
exports.SiteUsersApiFp = function (configuration) {
    return {
        /**
         * Creates new site user
         * @summary Create site user
         * @param {string} realmId
         * @param {string} siteId
         * @param {SiteUser} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteUser: function (realmId, siteId, payload, options) {
            var localVarFetchArgs = exports.SiteUsersApiFetchParamCreator(configuration).createSiteUser(realmId, siteId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site user
         * @summary Delete site user
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteUser: function (realmId, siteId, userId, options) {
            var localVarFetchArgs = exports.SiteUsersApiFetchParamCreator(configuration).deleteSiteUser(realmId, siteId, userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site user
         * @summary Finds site user
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteUser: function (realmId, siteId, userId, options) {
            var localVarFetchArgs = exports.SiteUsersApiFetchParamCreator(configuration).findSiteUser(realmId, siteId, userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists all site users
         * @summary Lists site users
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiteUsers: function (realmId, siteId, options) {
            var localVarFetchArgs = exports.SiteUsersApiFetchParamCreator(configuration).listSiteUsers(realmId, siteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a site user
         * @summary Update site user
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} userId The id of the user
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteUser: function (realmId, siteId, userId, payload, options) {
            var localVarFetchArgs = exports.SiteUsersApiFetchParamCreator(configuration).updateSiteUser(realmId, siteId, userId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SiteUsersApi - factory interface
 * @export
 */
exports.SiteUsersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new site user
         * @summary Create site user
         * @param {string} realmId
         * @param {string} siteId
         * @param {SiteUser} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteUser: function (realmId, siteId, payload, options) {
            return exports.SiteUsersApiFp(configuration).createSiteUser(realmId, siteId, payload, options)(fetch, basePath);
        },
        /**
         * Deletes a site user
         * @summary Delete site user
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSiteUser: function (realmId, siteId, userId, options) {
            return exports.SiteUsersApiFp(configuration).deleteSiteUser(realmId, siteId, userId, options)(fetch, basePath);
        },
        /**
         * Finds a site user
         * @summary Finds site user
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSiteUser: function (realmId, siteId, userId, options) {
            return exports.SiteUsersApiFp(configuration).findSiteUser(realmId, siteId, userId, options)(fetch, basePath);
        },
        /**
         * Lists all site users
         * @summary Lists site users
         * @param {string} realmId The id of realm
         * @param {string} siteId The id of site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiteUsers: function (realmId, siteId, options) {
            return exports.SiteUsersApiFp(configuration).listSiteUsers(realmId, siteId, options)(fetch, basePath);
        },
        /**
         * Updates a site user
         * @summary Update site user
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {string} userId The id of the user
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSiteUser: function (realmId, siteId, userId, payload, options) {
            return exports.SiteUsersApiFp(configuration).updateSiteUser(realmId, siteId, userId, payload, options)(fetch, basePath);
        },
    };
};
/**
 * SiteUsersApi - object-oriented interface
 * @export
 * @class SiteUsersApi
 * @extends {BaseAPI}
 */
var SiteUsersApi = /** @class */ (function (_super) {
    __extends(SiteUsersApi, _super);
    function SiteUsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new site user
     * @summary Create site user
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteUser} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    SiteUsersApi.prototype.createSiteUser = function (realmId, siteId, payload, options) {
        return exports.SiteUsersApiFp(this.configuration).createSiteUser(realmId, siteId, payload, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site user
     * @summary Delete site user
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    SiteUsersApi.prototype.deleteSiteUser = function (realmId, siteId, userId, options) {
        return exports.SiteUsersApiFp(this.configuration).deleteSiteUser(realmId, siteId, userId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site user
     * @summary Finds site user
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    SiteUsersApi.prototype.findSiteUser = function (realmId, siteId, userId, options) {
        return exports.SiteUsersApiFp(this.configuration).findSiteUser(realmId, siteId, userId, options)(this.fetch, this.basePath);
    };
    /**
     * Lists all site users
     * @summary Lists site users
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    SiteUsersApi.prototype.listSiteUsers = function (realmId, siteId, options) {
        return exports.SiteUsersApiFp(this.configuration).listSiteUsers(realmId, siteId, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a site user
     * @summary Update site user
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} userId The id of the user
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    SiteUsersApi.prototype.updateSiteUser = function (realmId, siteId, userId, payload, options) {
        return exports.SiteUsersApiFp(this.configuration).updateSiteUser(realmId, siteId, userId, payload, options)(this.fetch, this.basePath);
    };
    return SiteUsersApi;
}(BaseAPI));
exports.SiteUsersApi = SiteUsersApi;
/**
 * SitesApi - fetch parameter creator
 * @export
 */
exports.SitesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new site
         * @summary Create site
         * @param {string} realmId
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSite: function (realmId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createSite.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling createSite.');
            }
            var localVarPath = "/realms/{realmId}/sites"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Site" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a site
         * @summary Delete site
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite: function (realmId, siteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteSite.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling deleteSite.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a site
         * @summary Finds site
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSite: function (realmId, siteId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findSite.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling findSite.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of realm sites
         * @summary Lists sites
         * @param {string} realmId The relam id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSites: function (realmId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling listSites.');
            }
            var localVarPath = "/realms/{realmId}/sites"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a site
         * @summary Update site
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite: function (realmId, siteId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateSite.');
            }
            // verify required parameter 'siteId' is not null or undefined
            if (siteId === null || siteId === undefined) {
                throw new RequiredError('siteId', 'Required parameter siteId was null or undefined when calling updateSite.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling updateSite.');
            }
            var localVarPath = "/realms/{realmId}/sites/{siteId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "siteId" + "}", encodeURIComponent(String(siteId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Site" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SitesApi - functional programming interface
 * @export
 */
exports.SitesApiFp = function (configuration) {
    return {
        /**
         * Creates new site
         * @summary Create site
         * @param {string} realmId
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSite: function (realmId, payload, options) {
            var localVarFetchArgs = exports.SitesApiFetchParamCreator(configuration).createSite(realmId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a site
         * @summary Delete site
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite: function (realmId, siteId, options) {
            var localVarFetchArgs = exports.SitesApiFetchParamCreator(configuration).deleteSite(realmId, siteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds a site
         * @summary Finds site
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSite: function (realmId, siteId, options) {
            var localVarFetchArgs = exports.SitesApiFetchParamCreator(configuration).findSite(realmId, siteId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List of realm sites
         * @summary Lists sites
         * @param {string} realmId The relam id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSites: function (realmId, options) {
            var localVarFetchArgs = exports.SitesApiFetchParamCreator(configuration).listSites(realmId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a site
         * @summary Update site
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite: function (realmId, siteId, payload, options) {
            var localVarFetchArgs = exports.SitesApiFetchParamCreator(configuration).updateSite(realmId, siteId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SitesApi - factory interface
 * @export
 */
exports.SitesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new site
         * @summary Create site
         * @param {string} realmId
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSite: function (realmId, payload, options) {
            return exports.SitesApiFp(configuration).createSite(realmId, payload, options)(fetch, basePath);
        },
        /**
         * Deletes a site
         * @summary Delete site
         * @param {string} realmId The realm id
         * @param {string} siteId The id of the site being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite: function (realmId, siteId, options) {
            return exports.SitesApiFp(configuration).deleteSite(realmId, siteId, options)(fetch, basePath);
        },
        /**
         * Finds a site
         * @summary Finds site
         * @param {string} realmId The id of the realm
         * @param {string} siteId The id of the site
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSite: function (realmId, siteId, options) {
            return exports.SitesApiFp(configuration).findSite(realmId, siteId, options)(fetch, basePath);
        },
        /**
         * List of realm sites
         * @summary Lists sites
         * @param {string} realmId The relam id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSites: function (realmId, options) {
            return exports.SitesApiFp(configuration).listSites(realmId, options)(fetch, basePath);
        },
        /**
         * Updates a site
         * @summary Update site
         * @param {string} realmId The realm to be updated
         * @param {string} siteId
         * @param {Site} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite: function (realmId, siteId, payload, options) {
            return exports.SitesApiFp(configuration).updateSite(realmId, siteId, payload, options)(fetch, basePath);
        },
    };
};
/**
 * SitesApi - object-oriented interface
 * @export
 * @class SitesApi
 * @extends {BaseAPI}
 */
var SitesApi = /** @class */ (function (_super) {
    __extends(SitesApi, _super);
    function SitesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new site
     * @summary Create site
     * @param {string} realmId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    SitesApi.prototype.createSite = function (realmId, payload, options) {
        return exports.SitesApiFp(this.configuration).createSite(realmId, payload, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a site
     * @summary Delete site
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    SitesApi.prototype.deleteSite = function (realmId, siteId, options) {
        return exports.SitesApiFp(this.configuration).deleteSite(realmId, siteId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds a site
     * @summary Finds site
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    SitesApi.prototype.findSite = function (realmId, siteId, options) {
        return exports.SitesApiFp(this.configuration).findSite(realmId, siteId, options)(this.fetch, this.basePath);
    };
    /**
     * List of realm sites
     * @summary Lists sites
     * @param {string} realmId The relam id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    SitesApi.prototype.listSites = function (realmId, options) {
        return exports.SitesApiFp(this.configuration).listSites(realmId, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a site
     * @summary Update site
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    SitesApi.prototype.updateSite = function (realmId, siteId, payload, options) {
        return exports.SitesApiFp(this.configuration).updateSite(realmId, siteId, payload, options)(this.fetch, this.basePath);
    };
    return SitesApi;
}(BaseAPI));
exports.SitesApi = SitesApi;
/**
 * UsersApi - fetch parameter creator
 * @export
 */
exports.UsersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates new user
         * @summary Create user
         * @param {string} realmId The realm to be updated
         * @param {string} password Initial password for the user
         * @param {User} body The user to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (realmId, password, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling createUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling createUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createUser.');
            }
            var localVarPath = "/realms/{realmId}/users"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an user
         * @summary Delete user
         * @param {string} realmId The id of the realm being deleted
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (realmId, userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling deleteUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteUser.');
            }
            var localVarPath = "/realms/{realmId}/users/{userId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds an user
         * @summary Finds user
         * @param {string} realmId The id of the realm
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUser: function (realmId, userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling findUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling findUser.');
            }
            var localVarPath = "/realms/{realmId}/users/{userId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists realm users
         * @summary List users
         * @param {string} realmId The realm to be updated
         * @param {number} firstResult First result
         * @param {number} maxResults Max results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (realmId, firstResult, maxResults, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling listUsers.');
            }
            // verify required parameter 'firstResult' is not null or undefined
            if (firstResult === null || firstResult === undefined) {
                throw new RequiredError('firstResult', 'Required parameter firstResult was null or undefined when calling listUsers.');
            }
            // verify required parameter 'maxResults' is not null or undefined
            if (maxResults === null || maxResults === undefined) {
                throw new RequiredError('maxResults', 'Required parameter maxResults was null or undefined when calling listUsers.');
            }
            var localVarPath = "/realms/{realmId}/users"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (firstResult !== undefined) {
                localVarQueryParameter['firstResult'] = firstResult;
            }
            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an user
         * @summary Update user
         * @param {string} realmId The realm to be updated
         * @param {string} userId The id of the user
         * @param {User} payload Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (realmId, userId, payload, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'realmId' is not null or undefined
            if (realmId === null || realmId === undefined) {
                throw new RequiredError('realmId', 'Required parameter realmId was null or undefined when calling updateUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling updateUser.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload', 'Required parameter payload was null or undefined when calling updateUser.');
            }
            var localVarPath = "/realms/{realmId}/users/{userId}"
                .replace("{" + "realmId" + "}", encodeURIComponent(String(realmId)))
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(payload || {}) : (payload || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         * Creates new user
         * @summary Create user
         * @param {string} realmId The realm to be updated
         * @param {string} password Initial password for the user
         * @param {User} body The user to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (realmId, password, body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).createUser(realmId, password, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes an user
         * @summary Delete user
         * @param {string} realmId The id of the realm being deleted
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (realmId, userId, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).deleteUser(realmId, userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finds an user
         * @summary Finds user
         * @param {string} realmId The id of the realm
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUser: function (realmId, userId, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).findUser(realmId, userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists realm users
         * @summary List users
         * @param {string} realmId The realm to be updated
         * @param {number} firstResult First result
         * @param {number} maxResults Max results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (realmId, firstResult, maxResults, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listUsers(realmId, firstResult, maxResults, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an user
         * @summary Update user
         * @param {string} realmId The realm to be updated
         * @param {string} userId The id of the user
         * @param {User} payload Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (realmId, userId, payload, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateUser(realmId, userId, payload, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates new user
         * @summary Create user
         * @param {string} realmId The realm to be updated
         * @param {string} password Initial password for the user
         * @param {User} body The user to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (realmId, password, body, options) {
            return exports.UsersApiFp(configuration).createUser(realmId, password, body, options)(fetch, basePath);
        },
        /**
         * Deletes an user
         * @summary Delete user
         * @param {string} realmId The id of the realm being deleted
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (realmId, userId, options) {
            return exports.UsersApiFp(configuration).deleteUser(realmId, userId, options)(fetch, basePath);
        },
        /**
         * Finds an user
         * @summary Finds user
         * @param {string} realmId The id of the realm
         * @param {string} userId The id of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUser: function (realmId, userId, options) {
            return exports.UsersApiFp(configuration).findUser(realmId, userId, options)(fetch, basePath);
        },
        /**
         * Lists realm users
         * @summary List users
         * @param {string} realmId The realm to be updated
         * @param {number} firstResult First result
         * @param {number} maxResults Max results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (realmId, firstResult, maxResults, options) {
            return exports.UsersApiFp(configuration).listUsers(realmId, firstResult, maxResults, options)(fetch, basePath);
        },
        /**
         * Updates an user
         * @summary Update user
         * @param {string} realmId The realm to be updated
         * @param {string} userId The id of the user
         * @param {User} payload Payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (realmId, userId, payload, options) {
            return exports.UsersApiFp(configuration).updateUser(realmId, userId, payload, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates new user
     * @summary Create user
     * @param {string} realmId The realm to be updated
     * @param {string} password Initial password for the user
     * @param {User} body The user to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createUser = function (realmId, password, body, options) {
        return exports.UsersApiFp(this.configuration).createUser(realmId, password, body, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes an user
     * @summary Delete user
     * @param {string} realmId The id of the realm being deleted
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUser = function (realmId, userId, options) {
        return exports.UsersApiFp(this.configuration).deleteUser(realmId, userId, options)(this.fetch, this.basePath);
    };
    /**
     * Finds an user
     * @summary Finds user
     * @param {string} realmId The id of the realm
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUser = function (realmId, userId, options) {
        return exports.UsersApiFp(this.configuration).findUser(realmId, userId, options)(this.fetch, this.basePath);
    };
    /**
     * Lists realm users
     * @summary List users
     * @param {string} realmId The realm to be updated
     * @param {number} firstResult First result
     * @param {number} maxResults Max results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUsers = function (realmId, firstResult, maxResults, options) {
        return exports.UsersApiFp(this.configuration).listUsers(realmId, firstResult, maxResults, options)(this.fetch, this.basePath);
    };
    /**
     * Updates an user
     * @summary Update user
     * @param {string} realmId The realm to be updated
     * @param {string} userId The id of the user
     * @param {User} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUser = function (realmId, userId, payload, options) {
        return exports.UsersApiFp(this.configuration).updateUser(realmId, userId, payload, options)(this.fetch, this.basePath);
    };
    return UsersApi;
}(BaseAPI));
exports.UsersApi = UsersApi;

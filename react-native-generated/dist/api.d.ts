/**
 * Joints Tulistop Pro+ API
 * Joints Tulistop Pro+ API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * The error message
     * @type {string}
     * @memberof BadRequest
     */
    message: string;
}
/**
 *
 * @export
 * @interface Conflict
 */
export interface Conflict {
    /**
     * The error message
     * @type {string}
     * @memberof Conflict
     */
    message: string;
}
/**
 *
 * @export
 * @interface Detail
 */
export interface Detail {
    /**
     * Id of the detail
     * @type {string}
     * @memberof Detail
     */
    id?: string;
    /**
     * name of the detail
     * @type {string}
     * @memberof Detail
     */
    name: string;
    /**
     * Detail number
     * @type {string}
     * @memberof Detail
     */
    detailNumber: string;
    /**
     * Type of deail conduit
     * @type {string}
     * @memberof Detail
     */
    conduitType?: string;
    /**
     * todo
     * @type {string}
     * @memberof Detail
     */
    size?: string;
    /**
     * todo
     * @type {string}
     * @memberof Detail
     */
    classification?: string;
    /**
     *
     * @type {string}
     * @memberof Detail
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof Detail
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof Detail
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof Detail
     */
    modifiedAt?: string;
}
/**
 *
 * @export
 * @interface DetailLocation
 */
export interface DetailLocation {
    /**
     * x coordinate of the location
     * @type {number}
     * @memberof DetailLocation
     */
    x?: number;
    /**
     * y coordinate of the location
     * @type {number}
     * @memberof DetailLocation
     */
    y?: number;
    /**
     *
     * @type {string}
     * @memberof DetailLocation
     */
    status?: DetailLocation.StatusEnum;
    /**
     * Id of the worker
     * @type {string}
     * @memberof DetailLocation
     */
    workerId?: string;
    /**
     * Id of the planner
     * @type {string}
     * @memberof DetailLocation
     */
    plannerId?: string;
    /**
     * Id of the updater
     * @type {string}
     * @memberof DetailLocation
     */
    updaterId?: string;
    /**
     *
     * @type {string}
     * @memberof DetailLocation
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof DetailLocation
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof DetailLocation
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof DetailLocation
     */
    modifiedAt?: string;
}
/**
 * @export
 * @namespace DetailLocation
 */
export declare namespace DetailLocation {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        PLANNED,
        REVIEW,
        DONE,
        APPROVED
    }
}
/**
 *
 * @export
 * @interface DetailLocationNote
 */
export interface DetailLocationNote {
    /**
     * Content of the note
     * @type {string}
     * @memberof DetailLocationNote
     */
    content?: string;
    /**
     * Id of the user who left the note
     * @type {string}
     * @memberof DetailLocationNote
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof DetailLocationNote
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof DetailLocationNote
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof DetailLocationNote
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof DetailLocationNote
     */
    modifiedAt?: string;
}
/**
 *
 * @export
 * @interface DetailSchematic
 */
export interface DetailSchematic {
    /**
     * ID of detail schematic
     * @type {string}
     * @memberof DetailSchematic
     */
    id?: string;
    /**
     * ID of schematic file
     * @type {string}
     * @memberof DetailSchematic
     */
    fileId?: string;
    /**
     * List of product ids
     * @type {Array<string>}
     * @memberof DetailSchematic
     */
    productIds?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof DetailSchematic
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof DetailSchematic
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof DetailSchematic
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof DetailSchematic
     */
    modifiedAt?: string;
}
/**
 *
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
    /**
     * The error message
     * @type {string}
     * @memberof Forbidden
     */
    message: string;
}
/**
 *
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * ID of image
     * @type {string}
     * @memberof Image
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Image
     */
    small?: string;
    /**
     *
     * @type {string}
     * @memberof Image
     */
    medium?: string;
    /**
     *
     * @type {string}
     * @memberof Image
     */
    large?: string;
    /**
     *
     * @type {string}
     * @memberof Image
     */
    raw?: string;
    /**
     *
     * @type {string}
     * @memberof Image
     */
    creatorId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof Image
     */
    createdAt?: string;
}
/**
 *
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * The error message
     * @type {string}
     * @memberof InternalServerError
     */
    message: string;
}
/**
 *
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     * The error message
     * @type {string}
     * @memberof NotFound
     */
    message: string;
}
/**
 *
 * @export
 * @interface NotImplemented
 */
export interface NotImplemented {
    /**
     * The error message
     * @type {string}
     * @memberof NotImplemented
     */
    message: string;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
    /**
     *
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * Whether the product is custom or not
     * @type {boolean}
     * @memberof Product
     */
    custom: boolean;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof Product
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof Product
     */
    modifiedAt?: string;
}
/**
 *
 * @export
 * @interface Realm
 */
export interface Realm {
    /**
     *
     * @type {string}
     * @memberof Realm
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Realm
     */
    displayName?: string;
    /**
     *
     * @type {string}
     * @memberof Realm
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Realm
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof Realm
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof Realm
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof Realm
     */
    modifiedAt?: string;
}
/**
 *
 * @export
 * @interface Site
 */
export interface Site {
    /**
     *
     * @type {string}
     * @memberof Site
     */
    id?: string;
    /**
     * Address of the site
     * @type {string}
     * @memberof Site
     */
    address: string;
    /**
     * Customer of the site
     * @type {string}
     * @memberof Site
     */
    customer: string;
    /**
     * Status of the site
     * @type {string}
     * @memberof Site
     */
    status: Site.StatusEnum;
    /**
     * Sites archivement date
     * @type {string}
     * @memberof Site
     */
    archivementDate?: string;
    /**
     * Sites description
     * @type {string}
     * @memberof Site
     */
    description?: string;
    /**
     * Officials comment
     * @type {string}
     * @memberof Site
     */
    officialsComment?: string;
    /**
     * TODO
     * @type {string}
     * @memberof Site
     */
    operation?: string;
    /**
     *
     * @type {string}
     * @memberof Site
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof Site
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof Site
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof Site
     */
    modifiedAt?: string;
}
/**
 * @export
 * @namespace Site
 */
export declare namespace Site {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        OPEN,
        ARCHIVED
    }
}
/**
 *
 * @export
 * @interface SiteSchematic
 */
export interface SiteSchematic {
    /**
     * ID of site schematic
     * @type {string}
     * @memberof SiteSchematic
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SiteSchematic
     */
    status?: SiteSchematic.StatusEnum;
    /**
     * TODO
     * @type {string}
     * @memberof SiteSchematic
     */
    type?: string;
    /**
     * Sites schematic scale
     * @type {string}
     * @memberof SiteSchematic
     */
    scale?: string;
    /**
     *
     * @type {string}
     * @memberof SiteSchematic
     */
    fileId?: string;
    /**
     *
     * @type {string}
     * @memberof SiteSchematic
     */
    creatorId?: string;
    /**
     *
     * @type {string}
     * @memberof SiteSchematic
     */
    lastModifierId?: string;
    /**
     * Created date
     * @type {string}
     * @memberof SiteSchematic
     */
    createdAt?: string;
    /**
     * Date modified
     * @type {string}
     * @memberof SiteSchematic
     */
    modifiedAt?: string;
}
/**
 * @export
 * @namespace SiteSchematic
 */
export declare namespace SiteSchematic {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        PROCESSING,
        ERROR,
        READY
    }
}
/**
 *
 * @export
 * @interface SiteUser
 */
export interface SiteUser {
    /**
     *
     * @type {string}
     * @memberof SiteUser
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SiteUser
     */
    userId: string;
    /**
     *
     * @type {string}
     * @memberof SiteUser
     */
    role: SiteUser.RoleEnum;
}
/**
 * @export
 * @namespace SiteUser
 */
export declare namespace SiteUser {
    /**
     * @export
     * @enum {string}
     */
    enum RoleEnum {
        WORKER,
        PLANNER
    }
}
/**
 *
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     * The error message
     * @type {string}
     * @memberof Unauthorized
     */
    message: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     *
     * @type {UserRole}
     * @memberof User
     */
    role: UserRole;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum UserRole {
    USER,
    PLANNER
}
/**
 * ProductsApi - fetch parameter creator
 * @export
 */
export declare const ProductsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new product
     * @summary Create product
     * @param {Product} body The realm to be created
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(body: Product, realmId: string, options?: any): FetchArgs;
    /**
     * Deletes a product
     * @summary Delete product
     * @param {string} realmId The id of the realm being deleted
     * @param {string} productId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(realmId: string, productId: string, options?: any): FetchArgs;
    /**
     * Finds a product
     * @summary Finds product
     * @param {string} realmId The id of the realm
     * @param {string} productId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProduct(realmId: string, productId: string, options?: any): FetchArgs;
    /**
     * Finds all products by id
     * @summary Finds products by id
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(realmId: string, options?: any): FetchArgs;
    /**
     * Updates a product
     * @summary Update product
     * @param {string} realmId The realm to be updated
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(realmId: string, productId: string, options?: any): FetchArgs;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Creates new product
     * @summary Create product
     * @param {Product} body The realm to be created
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(body: Product, realmId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product>;
    /**
     * Deletes a product
     * @summary Delete product
     * @param {string} realmId The id of the realm being deleted
     * @param {string} productId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(realmId: string, productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Finds a product
     * @summary Finds product
     * @param {string} realmId The id of the realm
     * @param {string} productId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProduct(realmId: string, productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product>;
    /**
     * Finds all products by id
     * @summary Finds products by id
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(realmId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product[]>;
    /**
     * Updates a product
     * @summary Update product
     * @param {string} realmId The realm to be updated
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(realmId: string, productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new product
     * @summary Create product
     * @param {Product} body The realm to be created
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(body: Product, realmId: string, options?: any): Promise<Product>;
    /**
     * Deletes a product
     * @summary Delete product
     * @param {string} realmId The id of the realm being deleted
     * @param {string} productId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(realmId: string, productId: string, options?: any): Promise<Response>;
    /**
     * Finds a product
     * @summary Finds product
     * @param {string} realmId The id of the realm
     * @param {string} productId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProduct(realmId: string, productId: string, options?: any): Promise<Product>;
    /**
     * Finds all products by id
     * @summary Finds products by id
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(realmId: string, options?: any): Promise<Product[]>;
    /**
     * Updates a product
     * @summary Update product
     * @param {string} realmId The realm to be updated
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(realmId: string, productId: string, options?: any): Promise<Product>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Creates new product
     * @summary Create product
     * @param {Product} body The realm to be created
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    createProduct(body: Product, realmId: string, options?: any): Promise<Product>;
    /**
     * Deletes a product
     * @summary Delete product
     * @param {string} realmId The id of the realm being deleted
     * @param {string} productId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProduct(realmId: string, productId: string, options?: any): Promise<Response>;
    /**
     * Finds a product
     * @summary Finds product
     * @param {string} realmId The id of the realm
     * @param {string} productId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    findProduct(realmId: string, productId: string, options?: any): Promise<Product>;
    /**
     * Finds all products by id
     * @summary Finds products by id
     * @param {string} realmId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProducts(realmId: string, options?: any): Promise<Product[]>;
    /**
     * Updates a product
     * @summary Update product
     * @param {string} realmId The realm to be updated
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    updateProduct(realmId: string, productId: string, options?: any): Promise<Product>;
}
/**
 * RealmsApi - fetch parameter creator
 * @export
 */
export declare const RealmsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new realm
     * @summary Create realm
     * @param {string} adminEmail Initial realm admin email
     * @param {string} adminPassword Initial realm admin password
     * @param {Realm} body The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRealm(adminEmail: string, adminPassword: string, body: Realm, options?: any): FetchArgs;
    /**
     * Deletes a realm
     * @summary Delete realm
     * @param {string} realmId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRealm(realmId: string, options?: any): FetchArgs;
    /**
     * Finds a realm
     * @summary Finds realm
     * @param {string} realmId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRealm(realmId: string, options?: any): FetchArgs;
    /**
     * Finds all realms
     * @summary Finds realms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealms(options?: any): FetchArgs;
    /**
     * Updates a realm
     * @summary Update realm
     * @param {string} realmId The realm to be updated
     * @param {Realm} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRealm(realmId: string, payload: Realm, options?: any): FetchArgs;
};
/**
 * RealmsApi - functional programming interface
 * @export
 */
export declare const RealmsApiFp: (configuration?: Configuration) => {
    /**
     * Creates new realm
     * @summary Create realm
     * @param {string} adminEmail Initial realm admin email
     * @param {string} adminPassword Initial realm admin password
     * @param {Realm} body The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRealm(adminEmail: string, adminPassword: string, body: Realm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Realm>;
    /**
     * Deletes a realm
     * @summary Delete realm
     * @param {string} realmId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRealm(realmId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Finds a realm
     * @summary Finds realm
     * @param {string} realmId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRealm(realmId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Realm>;
    /**
     * Finds all realms
     * @summary Finds realms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealms(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Realm[]>;
    /**
     * Updates a realm
     * @summary Update realm
     * @param {string} realmId The realm to be updated
     * @param {Realm} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRealm(realmId: string, payload: Realm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Realm>;
};
/**
 * RealmsApi - factory interface
 * @export
 */
export declare const RealmsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new realm
     * @summary Create realm
     * @param {string} adminEmail Initial realm admin email
     * @param {string} adminPassword Initial realm admin password
     * @param {Realm} body The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRealm(adminEmail: string, adminPassword: string, body: Realm, options?: any): Promise<Realm>;
    /**
     * Deletes a realm
     * @summary Delete realm
     * @param {string} realmId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRealm(realmId: string, options?: any): Promise<Response>;
    /**
     * Finds a realm
     * @summary Finds realm
     * @param {string} realmId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRealm(realmId: string, options?: any): Promise<Realm>;
    /**
     * Finds all realms
     * @summary Finds realms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRealms(options?: any): Promise<Realm[]>;
    /**
     * Updates a realm
     * @summary Update realm
     * @param {string} realmId The realm to be updated
     * @param {Realm} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRealm(realmId: string, payload: Realm, options?: any): Promise<Realm>;
};
/**
 * RealmsApi - object-oriented interface
 * @export
 * @class RealmsApi
 * @extends {BaseAPI}
 */
export declare class RealmsApi extends BaseAPI {
    /**
     * Creates new realm
     * @summary Create realm
     * @param {string} adminEmail Initial realm admin email
     * @param {string} adminPassword Initial realm admin password
     * @param {Realm} body The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    createRealm(adminEmail: string, adminPassword: string, body: Realm, options?: any): Promise<Realm>;
    /**
     * Deletes a realm
     * @summary Delete realm
     * @param {string} realmId The id of the realm being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    deleteRealm(realmId: string, options?: any): Promise<Response>;
    /**
     * Finds a realm
     * @summary Finds realm
     * @param {string} realmId The id of the realm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    findRealm(realmId: string, options?: any): Promise<Realm>;
    /**
     * Finds all realms
     * @summary Finds realms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    getRealms(options?: any): Promise<Realm[]>;
    /**
     * Updates a realm
     * @summary Update realm
     * @param {string} realmId The realm to be updated
     * @param {Realm} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmsApi
     */
    updateRealm(realmId: string, payload: Realm, options?: any): Promise<Realm>;
}
/**
 * SiteDetailsApi - fetch parameter creator
 * @export
 */
export declare const SiteDetailsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new site detail
     * @summary Create site detail
     * @param {string} realmId
     * @param {string} siteId
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetail(realmId: string, siteId: string, payload: Detail, options?: any): FetchArgs;
    /**
     * Creates new site detail location
     * @summary Create site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocation(realmId: string, siteId: string, detailId: string, body: DetailLocation, options?: any): FetchArgs;
    /**
     * Creates new site detail location image
     * @summary Create site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, body: Image, options?: any): FetchArgs;
    /**
     * Creates new site detail location note
     * @summary Create site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocationNote, options?: any): FetchArgs;
    /**
     * Creates new site detail shemantic
     * @summary Create site detail shemantic
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailSchematic(realmId: string, siteId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): FetchArgs;
    /**
     * Deletes a detail schematic
     * @summary Delete detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): FetchArgs;
    /**
     * Deletes a detail
     * @summary Delete detail
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): FetchArgs;
    /**
     * Deletes a site detail location
     * @summary Delete site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): FetchArgs;
    /**
     * Deletes a site detail location image
     * @summary Delete site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, options?: any): FetchArgs;
    /**
     * Deletes a site detail location note
     * @summary Delete site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): FetchArgs;
    /**
     * Deletes a site report
     * @summary Delete site report
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} reportType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteReport(realmId: string, siteId: string, reportType: string, options?: any): FetchArgs;
    /**
     * Finds a site detail
     * @summary Finds site detail
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): FetchArgs;
    /**
     * Finds a site detail location
     * @summary Finds site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): FetchArgs;
    /**
     * Finds a site detail location image
     * @summary Finds site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} imageId
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, imageId: string, locationId: string, options?: any): FetchArgs;
    /**
     * Finds a site detail location note
     * @summary Finds site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {string} noteId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): FetchArgs;
    /**
     * Finds a site detail schematic
     * @summary Finds site detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): FetchArgs;
    /**
     * Finds all site detail location images
     * @summary Finds site detail location images
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocationImages(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): FetchArgs;
    /**
     * Finds all site detail location notes
     * @summary Finds site detail location notes
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocationNotes(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): FetchArgs;
    /**
     * Finds all site detail locations
     * @summary Finds site detail locations
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocations(realmId: string, siteId: string, detailId: string, options?: any): FetchArgs;
    /**
     * Finds all sites detail schematics
     * @summary Finds sites detail schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {string} detailId The id of detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailSchematics(realmId: string, siteId: string, detailId: string, options?: any): FetchArgs;
    /**
     * Finds all sites details
     * @summary Finds sites details
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetails(realmId: string, siteId: string, options?: any): FetchArgs;
    /**
     * Updates a detail schematic
     * @summary Update detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): FetchArgs;
    /**
     * Updates a detail
     * @summary Update detail
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} detailId The id of the detail
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetail(realmId: string, siteId: string, detailId: string, payload: Detail, options?: any): FetchArgs;
    /**
     * Updates a site detail location
     * @summary Update site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocation, options?: any): FetchArgs;
    /**
     * Updates a site detail location image
     * @summary Update site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, body: Image, options?: any): FetchArgs;
    /**
     * Updates a site detail location note
     * @summary Update site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, body: DetailLocationNote, options?: any): FetchArgs;
};
/**
 * SiteDetailsApi - functional programming interface
 * @export
 */
export declare const SiteDetailsApiFp: (configuration?: Configuration) => {
    /**
     * Creates new site detail
     * @summary Create site detail
     * @param {string} realmId
     * @param {string} siteId
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetail(realmId: string, siteId: string, payload: Detail, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Detail>;
    /**
     * Creates new site detail location
     * @summary Create site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocation(realmId: string, siteId: string, detailId: string, body: DetailLocation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocation>;
    /**
     * Creates new site detail location image
     * @summary Create site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, body: Image, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Image>;
    /**
     * Creates new site detail location note
     * @summary Create site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocationNote, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocationNote>;
    /**
     * Creates new site detail shemantic
     * @summary Create site detail shemantic
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailSchematic(realmId: string, siteId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailSchematic>;
    /**
     * Deletes a detail schematic
     * @summary Delete detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Deletes a detail
     * @summary Delete detail
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Deletes a site detail location
     * @summary Delete site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Deletes a site detail location image
     * @summary Delete site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Deletes a site detail location note
     * @summary Delete site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Deletes a site report
     * @summary Delete site report
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} reportType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteReport(realmId: string, siteId: string, reportType: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     * Finds a site detail
     * @summary Finds site detail
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Detail>;
    /**
     * Finds a site detail location
     * @summary Finds site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocation>;
    /**
     * Finds a site detail location image
     * @summary Finds site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} imageId
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, imageId: string, locationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Image>;
    /**
     * Finds a site detail location note
     * @summary Finds site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {string} noteId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocationNote>;
    /**
     * Finds a site detail schematic
     * @summary Finds site detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailSchematic>;
    /**
     * Finds all site detail location images
     * @summary Finds site detail location images
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocationImages(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Image[]>;
    /**
     * Finds all site detail location notes
     * @summary Finds site detail location notes
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocationNotes(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocationNote[]>;
    /**
     * Finds all site detail locations
     * @summary Finds site detail locations
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocations(realmId: string, siteId: string, detailId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocation[]>;
    /**
     * Finds all sites detail schematics
     * @summary Finds sites detail schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {string} detailId The id of detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailSchematics(realmId: string, siteId: string, detailId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailSchematic[]>;
    /**
     * Finds all sites details
     * @summary Finds sites details
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetails(realmId: string, siteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Detail[]>;
    /**
     * Updates a detail schematic
     * @summary Update detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailSchematic>;
    /**
     * Updates a detail
     * @summary Update detail
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} detailId The id of the detail
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetail(realmId: string, siteId: string, detailId: string, payload: Detail, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Detail>;
    /**
     * Updates a site detail location
     * @summary Update site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocation>;
    /**
     * Updates a site detail location image
     * @summary Update site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, body: Image, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Image>;
    /**
     * Updates a site detail location note
     * @summary Update site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, body: DetailLocationNote, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DetailLocationNote>;
};
/**
 * SiteDetailsApi - factory interface
 * @export
 */
export declare const SiteDetailsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new site detail
     * @summary Create site detail
     * @param {string} realmId
     * @param {string} siteId
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetail(realmId: string, siteId: string, payload: Detail, options?: any): Promise<Detail>;
    /**
     * Creates new site detail location
     * @summary Create site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocation(realmId: string, siteId: string, detailId: string, body: DetailLocation, options?: any): Promise<DetailLocation>;
    /**
     * Creates new site detail location image
     * @summary Create site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, body: Image, options?: any): Promise<Image>;
    /**
     * Creates new site detail location note
     * @summary Create site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocationNote, options?: any): Promise<DetailLocationNote>;
    /**
     * Creates new site detail shemantic
     * @summary Create site detail shemantic
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteDetailSchematic(realmId: string, siteId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): Promise<DetailSchematic>;
    /**
     * Deletes a detail schematic
     * @summary Delete detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): Promise<Response>;
    /**
     * Deletes a detail
     * @summary Delete detail
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site detail location
     * @summary Delete site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site detail location image
     * @summary Delete site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site detail location note
     * @summary Delete site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site report
     * @summary Delete site report
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} reportType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteReport(realmId: string, siteId: string, reportType: string, options?: any): Promise<string>;
    /**
     * Finds a site detail
     * @summary Finds site detail
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): Promise<Detail>;
    /**
     * Finds a site detail location
     * @summary Finds site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<DetailLocation>;
    /**
     * Finds a site detail location image
     * @summary Finds site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} imageId
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, imageId: string, locationId: string, options?: any): Promise<Image>;
    /**
     * Finds a site detail location note
     * @summary Finds site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {string} noteId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): Promise<DetailLocationNote>;
    /**
     * Finds a site detail schematic
     * @summary Finds site detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): Promise<DetailSchematic>;
    /**
     * Finds all site detail location images
     * @summary Finds site detail location images
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocationImages(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<Image[]>;
    /**
     * Finds all site detail location notes
     * @summary Finds site detail location notes
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocationNotes(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<DetailLocationNote[]>;
    /**
     * Finds all site detail locations
     * @summary Finds site detail locations
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailLocations(realmId: string, siteId: string, detailId: string, options?: any): Promise<DetailLocation[]>;
    /**
     * Finds all sites detail schematics
     * @summary Finds sites detail schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {string} detailId The id of detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetailSchematics(realmId: string, siteId: string, detailId: string, options?: any): Promise<DetailSchematic[]>;
    /**
     * Finds all sites details
     * @summary Finds sites details
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteDetails(realmId: string, siteId: string, options?: any): Promise<Detail[]>;
    /**
     * Updates a detail schematic
     * @summary Update detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): Promise<DetailSchematic>;
    /**
     * Updates a detail
     * @summary Update detail
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} detailId The id of the detail
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetail(realmId: string, siteId: string, detailId: string, payload: Detail, options?: any): Promise<Detail>;
    /**
     * Updates a site detail location
     * @summary Update site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocation, options?: any): Promise<DetailLocation>;
    /**
     * Updates a site detail location image
     * @summary Update site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, body: Image, options?: any): Promise<Image>;
    /**
     * Updates a site detail location note
     * @summary Update site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, body: DetailLocationNote, options?: any): Promise<DetailLocationNote>;
};
/**
 * SiteDetailsApi - object-oriented interface
 * @export
 * @class SiteDetailsApi
 * @extends {BaseAPI}
 */
export declare class SiteDetailsApi extends BaseAPI {
    /**
     * Creates new site detail
     * @summary Create site detail
     * @param {string} realmId
     * @param {string} siteId
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    createSiteDetail(realmId: string, siteId: string, payload: Detail, options?: any): Promise<Detail>;
    /**
     * Creates new site detail location
     * @summary Create site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    createSiteDetailLocation(realmId: string, siteId: string, detailId: string, body: DetailLocation, options?: any): Promise<DetailLocation>;
    /**
     * Creates new site detail location image
     * @summary Create site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    createSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, body: Image, options?: any): Promise<Image>;
    /**
     * Creates new site detail location note
     * @summary Create site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    createSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocationNote, options?: any): Promise<DetailLocationNote>;
    /**
     * Creates new site detail shemantic
     * @summary Create site detail shemantic
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    createSiteDetailSchematic(realmId: string, siteId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): Promise<DetailSchematic>;
    /**
     * Deletes a detail schematic
     * @summary Delete detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    deleteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): Promise<Response>;
    /**
     * Deletes a detail
     * @summary Delete detail
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    deleteSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site detail location
     * @summary Delete site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    deleteSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site detail location image
     * @summary Delete site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    deleteSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site detail location note
     * @summary Delete site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    deleteSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): Promise<Response>;
    /**
     * Deletes a site report
     * @summary Delete site report
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} reportType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    deleteSiteReport(realmId: string, siteId: string, reportType: string, options?: any): Promise<string>;
    /**
     * Finds a site detail
     * @summary Finds site detail
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    findSiteDetail(realmId: string, siteId: string, detailId: string, options?: any): Promise<Detail>;
    /**
     * Finds a site detail location
     * @summary Finds site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    findSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<DetailLocation>;
    /**
     * Finds a site detail location image
     * @summary Finds site detail location image
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} imageId
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    findSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, imageId: string, locationId: string, options?: any): Promise<Image>;
    /**
     * Finds a site detail location note
     * @summary Finds site detail location note
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {string} noteId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    findSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, options?: any): Promise<DetailLocationNote>;
    /**
     * Finds a site detail schematic
     * @summary Finds site detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    findSiteDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, options?: any): Promise<DetailSchematic>;
    /**
     * Finds all site detail location images
     * @summary Finds site detail location images
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    getSiteDetailLocationImages(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<Image[]>;
    /**
     * Finds all site detail location notes
     * @summary Finds site detail location notes
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    getSiteDetailLocationNotes(realmId: string, siteId: string, detailId: string, locationId: string, options?: any): Promise<DetailLocationNote[]>;
    /**
     * Finds all site detail locations
     * @summary Finds site detail locations
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    getSiteDetailLocations(realmId: string, siteId: string, detailId: string, options?: any): Promise<DetailLocation[]>;
    /**
     * Finds all sites detail schematics
     * @summary Finds sites detail schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {string} detailId The id of detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    getSiteDetailSchematics(realmId: string, siteId: string, detailId: string, options?: any): Promise<DetailSchematic[]>;
    /**
     * Finds all sites details
     * @summary Finds sites details
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    getSiteDetails(realmId: string, siteId: string, options?: any): Promise<Detail[]>;
    /**
     * Updates a detail schematic
     * @summary Update detail schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {string} detailId The id of the detail
     * @param {DetailSchematic} detailSchematic Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    updateDetailSchematic(realmId: string, siteId: string, schematicId: string, detailId: string, detailSchematic: DetailSchematic, options?: any): Promise<DetailSchematic>;
    /**
     * Updates a detail
     * @summary Update detail
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} detailId The id of the detail
     * @param {Detail} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    updateSiteDetail(realmId: string, siteId: string, detailId: string, payload: Detail, options?: any): Promise<Detail>;
    /**
     * Updates a site detail location
     * @summary Update site detail location
     * @param {string} realmId The realm to be created
     * @param {string} siteId The realm to be created
     * @param {string} detailId The realm to be created
     * @param {string} locationId The realm to be created
     * @param {DetailLocation} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    updateSiteDetailLocation(realmId: string, siteId: string, detailId: string, locationId: string, body: DetailLocation, options?: any): Promise<DetailLocation>;
    /**
     * Updates a site detail location image
     * @summary Update site detail location image
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} imageId
     * @param {Image} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    updateSiteDetailLocationImage(realmId: string, siteId: string, detailId: string, locationId: string, imageId: string, body: Image, options?: any): Promise<Image>;
    /**
     * Updates a site detail location note
     * @summary Update site detail location note
     * @param {string} realmId
     * @param {string} siteId
     * @param {string} detailId
     * @param {string} locationId
     * @param {string} noteId
     * @param {DetailLocationNote} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteDetailsApi
     */
    updateSiteDetailLocationNote(realmId: string, siteId: string, detailId: string, locationId: string, noteId: string, body: DetailLocationNote, options?: any): Promise<DetailLocationNote>;
}
/**
 * SiteSchematicTilesApi - fetch parameter creator
 * @export
 */
export declare const SiteSchematicTilesApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Returns site schematic tile image as png
     * @summary Returns site schematic tile image
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {number} z Tile zoom level
     * @param {number} x Tile x
     * @param {number} y Tile y
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteSchematicTileImage(realmId: string, siteId: string, schematicId: string, z: number, x: number, y: number, options?: any): FetchArgs;
};
/**
 * SiteSchematicTilesApi - functional programming interface
 * @export
 */
export declare const SiteSchematicTilesApiFp: (configuration?: Configuration) => {
    /**
     * Returns site schematic tile image as png
     * @summary Returns site schematic tile image
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {number} z Tile zoom level
     * @param {number} x Tile x
     * @param {number} y Tile y
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteSchematicTileImage(realmId: string, siteId: string, schematicId: string, z: number, x: number, y: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
/**
 * SiteSchematicTilesApi - factory interface
 * @export
 */
export declare const SiteSchematicTilesApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Returns site schematic tile image as png
     * @summary Returns site schematic tile image
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {number} z Tile zoom level
     * @param {number} x Tile x
     * @param {number} y Tile y
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSiteSchematicTileImage(realmId: string, siteId: string, schematicId: string, z: number, x: number, y: number, options?: any): Promise<string>;
};
/**
 * SiteSchematicTilesApi - object-oriented interface
 * @export
 * @class SiteSchematicTilesApi
 * @extends {BaseAPI}
 */
export declare class SiteSchematicTilesApi extends BaseAPI {
    /**
     * Returns site schematic tile image as png
     * @summary Returns site schematic tile image
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {number} z Tile zoom level
     * @param {number} x Tile x
     * @param {number} y Tile y
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicTilesApi
     */
    getSiteSchematicTileImage(realmId: string, siteId: string, schematicId: string, z: number, x: number, y: number, options?: any): Promise<string>;
}
/**
 * SiteSchematicsApi - fetch parameter creator
 * @export
 */
export declare const SiteSchematicsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new site schematic
     * @summary Create site schematic
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteSchematic} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteSchematic(realmId: string, siteId: string, payload: SiteSchematic, options?: any): FetchArgs;
    /**
     * Deletes a site schematic
     * @summary Delete site schematic
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): FetchArgs;
    /**
     * Finds a site schematic
     * @summary Finds site schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): FetchArgs;
    /**
     * Lists site schematics
     * @summary Lists site schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSiteSchematics(realmId: string, siteId: string, options?: any): FetchArgs;
    /**
     * Updates a Schematic
     * @summary Update Schematic
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} schematicId The id of the schematic
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchematic(realmId: string, siteId: string, schematicId: string, payload: Site, options?: any): FetchArgs;
};
/**
 * SiteSchematicsApi - functional programming interface
 * @export
 */
export declare const SiteSchematicsApiFp: (configuration?: Configuration) => {
    /**
     * Creates new site schematic
     * @summary Create site schematic
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteSchematic} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteSchematic(realmId: string, siteId: string, payload: SiteSchematic, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteSchematic>;
    /**
     * Deletes a site schematic
     * @summary Delete site schematic
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Finds a site schematic
     * @summary Finds site schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteSchematic>;
    /**
     * Lists site schematics
     * @summary Lists site schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSiteSchematics(realmId: string, siteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteSchematic[]>;
    /**
     * Updates a Schematic
     * @summary Update Schematic
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} schematicId The id of the schematic
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchematic(realmId: string, siteId: string, schematicId: string, payload: Site, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Site>;
};
/**
 * SiteSchematicsApi - factory interface
 * @export
 */
export declare const SiteSchematicsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new site schematic
     * @summary Create site schematic
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteSchematic} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteSchematic(realmId: string, siteId: string, payload: SiteSchematic, options?: any): Promise<SiteSchematic>;
    /**
     * Deletes a site schematic
     * @summary Delete site schematic
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): Promise<Response>;
    /**
     * Finds a site schematic
     * @summary Finds site schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): Promise<SiteSchematic>;
    /**
     * Lists site schematics
     * @summary Lists site schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSiteSchematics(realmId: string, siteId: string, options?: any): Promise<SiteSchematic[]>;
    /**
     * Updates a Schematic
     * @summary Update Schematic
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} schematicId The id of the schematic
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchematic(realmId: string, siteId: string, schematicId: string, payload: Site, options?: any): Promise<Site>;
};
/**
 * SiteSchematicsApi - object-oriented interface
 * @export
 * @class SiteSchematicsApi
 * @extends {BaseAPI}
 */
export declare class SiteSchematicsApi extends BaseAPI {
    /**
     * Creates new site schematic
     * @summary Create site schematic
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteSchematic} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    createSiteSchematic(realmId: string, siteId: string, payload: SiteSchematic, options?: any): Promise<SiteSchematic>;
    /**
     * Deletes a site schematic
     * @summary Delete site schematic
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    deleteSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): Promise<Response>;
    /**
     * Finds a site schematic
     * @summary Finds site schematic
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} schematicId The id of the schematic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    findSiteSchematic(realmId: string, siteId: string, schematicId: string, options?: any): Promise<SiteSchematic>;
    /**
     * Lists site schematics
     * @summary Lists site schematics
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    listSiteSchematics(realmId: string, siteId: string, options?: any): Promise<SiteSchematic[]>;
    /**
     * Updates a Schematic
     * @summary Update Schematic
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} schematicId The id of the schematic
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteSchematicsApi
     */
    updateSchematic(realmId: string, siteId: string, schematicId: string, payload: Site, options?: any): Promise<Site>;
}
/**
 * SiteUsersApi - fetch parameter creator
 * @export
 */
export declare const SiteUsersApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new site user
     * @summary Create site user
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteUser} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteUser(realmId: string, siteId: string, payload: SiteUser, options?: any): FetchArgs;
    /**
     * Deletes a site user
     * @summary Delete site user
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteUser(realmId: string, siteId: string, userId: string, options?: any): FetchArgs;
    /**
     * Finds a site user
     * @summary Finds site user
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteUser(realmId: string, siteId: string, userId: string, options?: any): FetchArgs;
    /**
     * Lists all site users
     * @summary Lists site users
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSiteUsers(realmId: string, siteId: string, options?: any): FetchArgs;
    /**
     * Updates a site user
     * @summary Update site user
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} userId The id of the user
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteUser(realmId: string, siteId: string, userId: string, payload: Site, options?: any): FetchArgs;
};
/**
 * SiteUsersApi - functional programming interface
 * @export
 */
export declare const SiteUsersApiFp: (configuration?: Configuration) => {
    /**
     * Creates new site user
     * @summary Create site user
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteUser} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteUser(realmId: string, siteId: string, payload: SiteUser, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteUser>;
    /**
     * Deletes a site user
     * @summary Delete site user
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteUser(realmId: string, siteId: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Finds a site user
     * @summary Finds site user
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteUser(realmId: string, siteId: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteUser>;
    /**
     * Lists all site users
     * @summary Lists site users
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSiteUsers(realmId: string, siteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteUser[]>;
    /**
     * Updates a site user
     * @summary Update site user
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} userId The id of the user
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteUser(realmId: string, siteId: string, userId: string, payload: Site, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Site>;
};
/**
 * SiteUsersApi - factory interface
 * @export
 */
export declare const SiteUsersApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new site user
     * @summary Create site user
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteUser} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSiteUser(realmId: string, siteId: string, payload: SiteUser, options?: any): Promise<SiteUser>;
    /**
     * Deletes a site user
     * @summary Delete site user
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSiteUser(realmId: string, siteId: string, userId: string, options?: any): Promise<Response>;
    /**
     * Finds a site user
     * @summary Finds site user
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSiteUser(realmId: string, siteId: string, userId: string, options?: any): Promise<SiteUser>;
    /**
     * Lists all site users
     * @summary Lists site users
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSiteUsers(realmId: string, siteId: string, options?: any): Promise<SiteUser[]>;
    /**
     * Updates a site user
     * @summary Update site user
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} userId The id of the user
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSiteUser(realmId: string, siteId: string, userId: string, payload: Site, options?: any): Promise<Site>;
};
/**
 * SiteUsersApi - object-oriented interface
 * @export
 * @class SiteUsersApi
 * @extends {BaseAPI}
 */
export declare class SiteUsersApi extends BaseAPI {
    /**
     * Creates new site user
     * @summary Create site user
     * @param {string} realmId
     * @param {string} siteId
     * @param {SiteUser} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    createSiteUser(realmId: string, siteId: string, payload: SiteUser, options?: any): Promise<SiteUser>;
    /**
     * Deletes a site user
     * @summary Delete site user
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    deleteSiteUser(realmId: string, siteId: string, userId: string, options?: any): Promise<Response>;
    /**
     * Finds a site user
     * @summary Finds site user
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    findSiteUser(realmId: string, siteId: string, userId: string, options?: any): Promise<SiteUser>;
    /**
     * Lists all site users
     * @summary Lists site users
     * @param {string} realmId The id of realm
     * @param {string} siteId The id of site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    listSiteUsers(realmId: string, siteId: string, options?: any): Promise<SiteUser[]>;
    /**
     * Updates a site user
     * @summary Update site user
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {string} userId The id of the user
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteUsersApi
     */
    updateSiteUser(realmId: string, siteId: string, userId: string, payload: Site, options?: any): Promise<Site>;
}
/**
 * SitesApi - fetch parameter creator
 * @export
 */
export declare const SitesApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new site
     * @summary Create site
     * @param {string} realmId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSite(realmId: string, payload: Site, options?: any): FetchArgs;
    /**
     * Deletes a site
     * @summary Delete site
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSite(realmId: string, siteId: string, options?: any): FetchArgs;
    /**
     * Finds a site
     * @summary Finds site
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSite(realmId: string, siteId: string, options?: any): FetchArgs;
    /**
     * List of realm sites
     * @summary Lists sites
     * @param {string} realmId The relam id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSites(realmId: string, options?: any): FetchArgs;
    /**
     * Updates a site
     * @summary Update site
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSite(realmId: string, siteId: string, payload: Site, options?: any): FetchArgs;
};
/**
 * SitesApi - functional programming interface
 * @export
 */
export declare const SitesApiFp: (configuration?: Configuration) => {
    /**
     * Creates new site
     * @summary Create site
     * @param {string} realmId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSite(realmId: string, payload: Site, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Site>;
    /**
     * Deletes a site
     * @summary Delete site
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSite(realmId: string, siteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Finds a site
     * @summary Finds site
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSite(realmId: string, siteId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Site>;
    /**
     * List of realm sites
     * @summary Lists sites
     * @param {string} realmId The relam id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSites(realmId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Site[]>;
    /**
     * Updates a site
     * @summary Update site
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSite(realmId: string, siteId: string, payload: Site, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Site>;
};
/**
 * SitesApi - factory interface
 * @export
 */
export declare const SitesApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new site
     * @summary Create site
     * @param {string} realmId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSite(realmId: string, payload: Site, options?: any): Promise<Site>;
    /**
     * Deletes a site
     * @summary Delete site
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSite(realmId: string, siteId: string, options?: any): Promise<Response>;
    /**
     * Finds a site
     * @summary Finds site
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSite(realmId: string, siteId: string, options?: any): Promise<Site>;
    /**
     * List of realm sites
     * @summary Lists sites
     * @param {string} realmId The relam id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSites(realmId: string, options?: any): Promise<Site[]>;
    /**
     * Updates a site
     * @summary Update site
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSite(realmId: string, siteId: string, payload: Site, options?: any): Promise<Site>;
};
/**
 * SitesApi - object-oriented interface
 * @export
 * @class SitesApi
 * @extends {BaseAPI}
 */
export declare class SitesApi extends BaseAPI {
    /**
     * Creates new site
     * @summary Create site
     * @param {string} realmId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    createSite(realmId: string, payload: Site, options?: any): Promise<Site>;
    /**
     * Deletes a site
     * @summary Delete site
     * @param {string} realmId The realm id
     * @param {string} siteId The id of the site being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    deleteSite(realmId: string, siteId: string, options?: any): Promise<Response>;
    /**
     * Finds a site
     * @summary Finds site
     * @param {string} realmId The id of the realm
     * @param {string} siteId The id of the site
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    findSite(realmId: string, siteId: string, options?: any): Promise<Site>;
    /**
     * List of realm sites
     * @summary Lists sites
     * @param {string} realmId The relam id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    listSites(realmId: string, options?: any): Promise<Site[]>;
    /**
     * Updates a site
     * @summary Update site
     * @param {string} realmId The realm to be updated
     * @param {string} siteId
     * @param {Site} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SitesApi
     */
    updateSite(realmId: string, siteId: string, payload: Site, options?: any): Promise<Site>;
}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export declare const UsersApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates new user
     * @summary Create user
     * @param {string} realmId The realm to be updated
     * @param {string} password Initial password for the user
     * @param {User} body The user to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(realmId: string, password: string, body: User, options?: any): FetchArgs;
    /**
     * Deletes an user
     * @summary Delete user
     * @param {string} realmId The id of the realm being deleted
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(realmId: string, userId: string, options?: any): FetchArgs;
    /**
     * Finds an user
     * @summary Finds user
     * @param {string} realmId The id of the realm
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUser(realmId: string, userId: string, options?: any): FetchArgs;
    /**
     * Lists realm users
     * @summary List users
     * @param {string} realmId The realm to be updated
     * @param {number} firstResult First result
     * @param {number} maxResults Max results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(realmId: string, firstResult: number, maxResults: number, options?: any): FetchArgs;
    /**
     * Updates an user
     * @summary Update user
     * @param {string} realmId The realm to be updated
     * @param {string} userId The id of the user
     * @param {User} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(realmId: string, userId: string, payload: User, options?: any): FetchArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Creates new user
     * @summary Create user
     * @param {string} realmId The realm to be updated
     * @param {string} password Initial password for the user
     * @param {User} body The user to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(realmId: string, password: string, body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User>;
    /**
     * Deletes an user
     * @summary Delete user
     * @param {string} realmId The id of the realm being deleted
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(realmId: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Finds an user
     * @summary Finds user
     * @param {string} realmId The id of the realm
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUser(realmId: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User>;
    /**
     * Lists realm users
     * @summary List users
     * @param {string} realmId The realm to be updated
     * @param {number} firstResult First result
     * @param {number} maxResults Max results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(realmId: string, firstResult: number, maxResults: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User[]>;
    /**
     * Updates an user
     * @summary Update user
     * @param {string} realmId The realm to be updated
     * @param {string} userId The id of the user
     * @param {User} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(realmId: string, userId: string, payload: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates new user
     * @summary Create user
     * @param {string} realmId The realm to be updated
     * @param {string} password Initial password for the user
     * @param {User} body The user to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(realmId: string, password: string, body: User, options?: any): Promise<User>;
    /**
     * Deletes an user
     * @summary Delete user
     * @param {string} realmId The id of the realm being deleted
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(realmId: string, userId: string, options?: any): Promise<Response>;
    /**
     * Finds an user
     * @summary Finds user
     * @param {string} realmId The id of the realm
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUser(realmId: string, userId: string, options?: any): Promise<User>;
    /**
     * Lists realm users
     * @summary List users
     * @param {string} realmId The realm to be updated
     * @param {number} firstResult First result
     * @param {number} maxResults Max results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(realmId: string, firstResult: number, maxResults: number, options?: any): Promise<User[]>;
    /**
     * Updates an user
     * @summary Update user
     * @param {string} realmId The realm to be updated
     * @param {string} userId The id of the user
     * @param {User} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(realmId: string, userId: string, payload: User, options?: any): Promise<User>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Creates new user
     * @summary Create user
     * @param {string} realmId The realm to be updated
     * @param {string} password Initial password for the user
     * @param {User} body The user to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(realmId: string, password: string, body: User, options?: any): Promise<User>;
    /**
     * Deletes an user
     * @summary Delete user
     * @param {string} realmId The id of the realm being deleted
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(realmId: string, userId: string, options?: any): Promise<Response>;
    /**
     * Finds an user
     * @summary Finds user
     * @param {string} realmId The id of the realm
     * @param {string} userId The id of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUser(realmId: string, userId: string, options?: any): Promise<User>;
    /**
     * Lists realm users
     * @summary List users
     * @param {string} realmId The realm to be updated
     * @param {number} firstResult First result
     * @param {number} maxResults Max results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(realmId: string, firstResult: number, maxResults: number, options?: any): Promise<User[]>;
    /**
     * Updates an user
     * @summary Update user
     * @param {string} realmId The realm to be updated
     * @param {string} userId The id of the user
     * @param {User} payload Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(realmId: string, userId: string, payload: User, options?: any): Promise<User>;
}
